{
  "version": 3,
  "sources": ["api/src/index.ts", "api/node_modules/wasm-feature-detect/dist/esm/index.js", "api/src/wonderland.ts", "api/src/utils/object.ts", "api/src/engine.ts", "api/src/wasm.ts", "api/src/utils/event.ts"],
  "sourcesContent": ["import {simd, threads} from 'wasm-feature-detect';\nimport {WonderlandEngine} from './engine.js';\nimport {WASM} from './wasm.js';\n\nimport * as API from './wonderland.js';\n\nexport * from './utils/event.js';\nexport * from './wonderland.js';\nexport * from './engine.js';\nexport * from './wasm.js';\n\nfunction loadScript(scriptURL: string): Promise<void> {\n    return new Promise((res: () => void, rej) => {\n        const s = document.createElement('script');\n        const node = document.body.appendChild(s);\n        s.onload = () => {\n            document.body.removeChild(node);\n            res();\n        };\n        s.onerror = (e) => {\n            document.body.removeChild(node);\n            rej(e);\n        };\n        s.src = scriptURL;\n    });\n}\n\n/**\n * Finds whether simd & threading are supported or not.\n *\n * @returns An object containing boolean for simd and thread.\n */\nasync function detectFeatures(): Promise<{\n    simdSupported: boolean;\n    threadsSupported: boolean;\n}> {\n    let [simdSupported, threadsSupported] = await Promise.all([simd(), threads()]);\n    if (simdSupported) {\n        console.log('WASM SIMD is supported');\n    } else {\n        console.warn('WASM SIMD is not supported');\n    }\n    if (threadsSupported) {\n        if (self.crossOriginIsolated) {\n            console.log('WASM Threads is supported');\n        } else {\n            console.warn(\n                'WASM Threads is supported, but the page is not crossOriginIsolated, therefore thread support is disabled.'\n            );\n        }\n    } else {\n        console.warn('WASM Threads is not supported');\n    }\n\n    threadsSupported = threadsSupported && self.crossOriginIsolated;\n    return {\n        simdSupported,\n        threadsSupported,\n    };\n}\n\n/**\n * Options to forward to {@link loadRuntime}\n */\nexport interface LoadRuntimeOptions {\n    /**\n     * If `true`, forces the runtime to load the SIMD-compatible version.\n     * If `undefined`, performs browser feature detection to check whether SIMD is supported or not.\n     */\n    simd: boolean;\n    /**\n     * If `true`, forces the runtime to load the threads-compatible version.\n     * If `undefined`, performs browser feature detection to check whether threads are supported or not.\n     */\n    threads: boolean;\n    /**\n     * If `true`, forces the runtime to load a physx-compatible version.\n     *\n     * **Note**: If your scene uses physx, you **must** enable this option.\n     */\n    physx: boolean;\n    /**\n     * If `true`, forces the runtime to load a loader-compatible version.\n     *\n     * This option allows to load gltf data at runtime.\n     */\n    loader: boolean;\n}\n\n/* Global boolean to check if AR/VR is supported. */\nconst xrSupported: {ar: boolean; vr: boolean} = {\n    ar: null!,\n    vr: null!,\n};\n\n/**\n * Check whether XR is supported and store the result in the global space.\n */\nfunction checkXRSupport(): Promise<{ar: boolean; vr: boolean}> {\n    if (typeof navigator === 'undefined' || !navigator.xr) {\n        xrSupported.vr = false;\n        xrSupported.ar = false;\n        return Promise.resolve(xrSupported);\n    }\n    const vrPromise =\n        xrSupported.vr !== null\n            ? Promise.resolve()\n            : navigator.xr\n                  .isSessionSupported('immersive-vr')\n                  .then((supported) => (xrSupported.vr = supported));\n    const arPromise =\n        xrSupported.ar !== null\n            ? Promise.resolve()\n            : navigator.xr\n                  .isSessionSupported('immersive-ar')\n                  .then((supported) => (xrSupported.ar = supported));\n\n    return Promise.all([vrPromise, arPromise]).then(() => xrSupported);\n}\n\n/**\n * Load the runtime using the WASM and JS files.\n *\n * @param runtime The runtime base string, e.g,: `WonderlandRuntime-loader-physx`.\n * @param options Options to modify the loading behaviour.\n *\n * @returns A promise that resolves when the engine is ready to be used.\n */\nexport async function loadRuntime(\n    runtime: string,\n    options: Partial<LoadRuntimeOptions> = {}\n): Promise<WonderlandEngine> {\n    const xrPromise = checkXRSupport();\n\n    const {simdSupported, threadsSupported} = await detectFeatures();\n    const {\n        simd = simdSupported,\n        threads = threadsSupported,\n        physx = false,\n        loader = false,\n    } = options;\n\n    const variant = [];\n    if (loader) variant.push('loader');\n    if (physx) variant.push('physx');\n    if (simd) variant.push('simd');\n    if (threads) variant.push('threads');\n\n    const variantStr = variant.join('-');\n\n    let filename = runtime;\n    if (variantStr) filename = `${filename}-${variantStr}`;\n\n    const r = await fetch(filename + '.wasm');\n    if (!r.ok) {\n        return Promise.reject('Failed to fetch runtime .wasm file');\n    }\n\n    const wasm = new WASM(threads);\n    (wasm.worker as string) = `${filename}.worker.js`;\n    (wasm.wasm as ArrayBuffer) = await r.arrayBuffer();\n    const engine = new WonderlandEngine(wasm);\n\n    if (!window._WL) {\n        window._WL = {runtimes: {}};\n    }\n    const runtimes = window._WL.runtimes;\n\n    /* Global identifier of this runtime in `window`. */\n    const runtimeGlobalId = variantStr ? variantStr : 'default';\n    /* Only load the runtime if not previously loaded in the page */\n    if (!runtimes[runtimeGlobalId]) {\n        await loadScript(`${filename}.js`);\n        runtimes[runtimeGlobalId] = window.instantiateWonderlandRuntime!;\n        window.instantiateWonderlandRuntime = undefined;\n    }\n    await runtimes[runtimeGlobalId](wasm);\n\n    engine._init();\n\n    const xr = await xrPromise;\n    (engine.arSupported as boolean) = xr.ar;\n    (engine.vrSupported as boolean) = xr.vr;\n\n    engine.start();\n\n    /* Backward compatibility. @todo Remove at 1.0.0 */\n    Object.assign(engine, API);\n    /* @ts-ignore */\n    window.WL = engine;\n\n    return engine;\n}\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "/**\n * Types\n */\n\nimport {WonderlandEngine} from './engine';\nimport {isString} from './utils/object.js';\n\n/** Decorator for making a getter enumerable */\nfunction enumerable() {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        descriptor.enumerable = true;\n    };\n}\n\n/**\n * Decorator for native component getters/setters.\n *\n * Adds a native component getter/setter pair to its list of properties. Marks\n * the property as enumerable and cloneable via {@link Object.addComponent}.\n */\nfunction property() {\n    return function <Type extends Component, Key extends keyof Type & string>(\n        target: Type,\n        propertyKey: Key,\n        descriptor: PropertyDescriptor\n    ) {\n        enumerable()(target, propertyKey, descriptor);\n        const ctor = target.constructor as ComponentConstructor;\n        ctor.Properties = ctor.Properties ?? {};\n        ctor.Properties[propertyKey] = {type: Type.Native};\n    };\n}\n\n/**\n * Represents any object that can be used as an array for read / write.\n */\nexport interface NumberArray {\n    length: number;\n    [n: number]: number;\n}\n\n/**\n * Type to describe a constructor.\n */\nexport type Constructor<T = any> = {\n    new (...args: any[]): T;\n};\n\n/**\n * Component constructor type.\n */\nexport type ComponentConstructor<T extends Component = Component> = Constructor<T> & {\n    TypeName: string;\n    Properties: Record<string, CustomParameter>;\n};\n\n/**\n * Component prototype interface.\n *\n * User component's should have the same structure.\n */\nexport interface ComponentProto {\n    /**\n     * Triggered after the component instantiation.\n     * For more information, please have a look at {@link Component.init}.\n     */\n    init?: () => void;\n    /**\n     * Triggered after the component is activated for the first time.\n     * For more information, please have a look at {@link Component.start}.\n     */\n    start?: () => void;\n    /**\n     * Triggered once per frame.\n     * For more information, please have a look at {@link Component.update}.\n     *\n     * @param dt Delta time, time since last update.\n     */\n    update?: (dt: number) => void;\n    /**\n     * Triggered when the component goes from deactivated to activated.\n     * For more information, please have a look at {@link Component.onActivate}.\n     */\n    onActivate?: () => void;\n    /**\n     * Triggered when the component goes from activated to deactivated.\n     * For more information, please have a look at {@link Component.onDeactivate}.\n     */\n    onDeactivate?: () => void;\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?: () => void;\n}\n\nexport interface GLTFExtensions {\n    root: Record<string, any>;\n    mesh: Record<string, any>;\n    node: Record<string, any>;\n    idMapping: Record<string, any>;\n}\n\n/**\n * Result obtained when loading a scene.\n */\nexport type SceneAppendResult =\n    | $Object\n    | {\n          root: $Object;\n          extensions: Record<string, any>;\n      };\n\n/**\n * Callback triggered on collision event.\n *\n * @param type Type of the event.\n * @param other Other component that was (un)collided with\n */\nexport type CollisionCallback = (type: CollisionEventType, other: PhysXComponent) => void;\n\n/** @todo Remove at 1.0.0 */\ndeclare const WL: WonderlandEngine;\n\nconst MISALIGNED_MSG = 'Misaligned pointer: please report a bug';\n\n/**\n * Wonderland Engine API\n * @namespace WL\n */\n\n/**\n * Component parameter type enum\n */\nexport enum Type {\n    /**\n     * **Native**\n     *\n     * Property of a native component. Must not be used in custom components.\n     *\n     * @hidden\n     */\n    Native = 1 << 0,\n\n    /**\n     * **Bool**:\n     *\n     * Appears in the editor as a checkbox.\n     *\n     * Initial value is `false`, unless overridden by the `default` property.\n     */\n    Bool = 1 << 1,\n\n    /**\n     * **Int**:\n     *\n     * Appears in the editor as an integer input field.\n     *\n     * Initial value is `0`, unless overridden by the `default` property.\n     */\n    Int = 1 << 2,\n\n    /**\n     * **Float**:\n     *\n     * Appears in the editor as a floating point input field.\n     *\n     * Initial value is `0.0`, unless overridden by the `default` property.\n     */\n    Float = 1 << 3,\n\n    /**\n     * **String / Text**:\n     *\n     * Appears in the editor as a single-line text input field.\n     *\n     * Initial value is an empty string, unless overridden by the `default`\n     * property.\n     */\n    String = 1 << 4,\n\n    /**\n     * **Enumeration**:\n     *\n     * Appears in the editor as a dropdown with given values. The additional\n     * `values` parameter with selection options is mandatory.\n     *\n     * The property value is resolved to an **index** into the `values` array.\n     *\n     * Initial value is the first element in `values`, unless overridden by\n     * the `default` property.\n     *\n     * @example\n     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},\n     */\n    Enum = 1 << 5,\n\n    /**\n     * **Object reference**:\n     *\n     * Appears in the editor as an object resource selection dropdown\n     * with object picker.\n     *\n     * Initial value is `null`.\n     */\n    Object = 1 << 6,\n\n    /**\n     * **Mesh reference**:\n     *\n     * Appears in the editor as a mesh resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Mesh = 1 << 7,\n\n    /**\n     * **Texture reference**:\n     *\n     * Appears in the editor as a texture resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Texture = 1 << 8,\n\n    /**\n     * **Material reference**:\n     *\n     * Appears in the editor as a material resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Material = 1 << 9,\n\n    /**\n     * **Animation reference**:\n     *\n     * Appears in the editor as an animation resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Animation = 1 << 10,\n\n    /**\n     * **Skin reference**:\n     *\n     * Appears in the editor as a skin resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Skin = 1 << 11,\n\n    /**\n     * **Color**:\n     *\n     * Appears in the editor as a color widget.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 1.0]`, unless overridden by the\n     * `default` property.\n     */\n    Color = 1 << 12,\n}\n\n/**\n * Custom component parameter.\n *\n * For more information about component properties, have a look\n * at the {@link Component.Properties} attribute.\n */\nexport interface CustomParameter {\n    /** Parameter type. */\n    type: Type;\n    /** Default value, depending on type. */\n    default?: any;\n    /** Values for {@link Type} */\n    values?: string[];\n}\n\n/**\n * Collider type enum for {@link CollisionComponent}.\n */\nexport enum Collider {\n    /**\n     * **Sphere Collider**:\n     *\n     * Simplest and most performant collision shape. If this type is set on a\n     * {@link CollisionComponent}, only the first component of\n     * {@link CollisionComponent#extents} will be used to determine the radius.\n     */\n    Sphere = 0,\n\n    /**\n     * **Axis Aligned Bounding Box Collider**:\n     *\n     * Box that is always aligned to XYZ axis. It cannot be rotated but is more\n     * efficient than {@link Collider.Box}.\n     */\n    AxisAlignedBox = 1,\n\n    /**\n     * **Aligned Bounding Box Collider**:\n     *\n     * Box that matches the object's rotation and translation correctly. This\n     * is the least efficient collider and should only be chosen over\n     * {@link Collider.Sphere} and {@link Collider.AxisAlignedBox} if really\n     * necessary.\n     */\n    Box = 2,\n}\n\n/**\n * Alignment type enum for {@link TextComponent}.\n */\nexport enum Alignment {\n    /** Text start is at object origin */\n    Left = 1,\n\n    /** Text center is at object origin */\n    Center = 2,\n\n    /** Text end is at object origin */\n    Right = 3,\n}\n\n/**\n * Justification type enum for {@link TextComponent}.\n */\nexport enum Justification {\n    /** Text line is at object origin */\n    Line = 1,\n\n    /** Text middle is at object origin */\n    Middle = 2,\n\n    /** Text top is at object origin */\n    Top = 3,\n\n    /** Text bottom is at object origin */\n    Bottom = 4,\n}\n\n/**\n * Effect type enum for {@link TextComponent}.\n */\nexport enum TextEffect {\n    /** Text is rendered normally */\n    None = 0,\n\n    /** Text is rendered with an outline */\n    Outline = 1,\n}\n\n/**\n * Input type enum for {@link InputComponent}.\n */\nexport enum InputType {\n    /** Head input */\n    Head = 0,\n\n    /** Left eye input */\n    EyeLeft = 1,\n\n    /** Right eye input */\n    EyeRight = 2,\n\n    /** Left controller input */\n    ControllerLeft = 3,\n\n    /** Right controller input */\n    ControllerRight = 4,\n\n    /** Left ray input */\n    RayLeft = 5,\n\n    /** Right ray input */\n    RayRight = 6,\n}\n\n/**\n * Light type enum for {@link LightComponent}.\n */\nexport enum LightType {\n    /** Point light */\n    Point = 1,\n\n    /** Spot light */\n    Spot = 2,\n\n    /** Sun light / Directional light */\n    Sun = 3,\n}\n\n/**\n * Animation state of {@link AnimationComponent}.\n */\nexport enum AnimationState {\n    /** Animation is currently playing */\n    Playing = 1,\n\n    /** Animation is paused and will continue at current playback\n     * time on {@link AnimationComponent#play} */\n    Paused = 2,\n\n    /** Animation is stopped */\n    Stopped = 3,\n}\n\n/**\n * Rigid body force mode for {@link PhysXComponent#addForce} and {@link PhysXComponent#addTorque}.\n *\n * [PhysX API Reference](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxapi/files/structPxForceMode.html)\n */\nexport enum ForceMode {\n    /** Apply as force */\n    Force = 0,\n\n    /** Apply as impulse */\n    Impulse = 1,\n\n    /** Apply as velocity change, mass dependent */\n    VelocityChange = 2,\n\n    /** Apply as mass dependent force */\n    Acceleration = 3,\n}\n\n/**\n * Collision callback event type.\n */\nexport enum CollisionEventType {\n    /** Touch/contact detected, collision */\n    Touch = 0,\n\n    /** Touch/contact lost, uncollide */\n    TouchLost = 1,\n\n    /** Touch/contact with trigger detected */\n    TriggerTouch = 2,\n\n    /** Touch/contact with trigger lost */\n    TriggerTouchLost = 3,\n}\n\n/**\n * Rigid body {@link PhysXComponent#shape}.\n *\n * [PhysX SDK Guide](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/Geometry.html#geometry-types).\n */\nexport enum Shape {\n    /** No shape. */\n    None = 0,\n\n    /** Sphere shape. */\n    Sphere = 1,\n\n    /** Capsule shape. */\n    Capsule = 2,\n\n    /** Box shape. */\n    Box = 3,\n\n    /** Plane shape. */\n    Plane = 4,\n\n    /** Convex mesh shape. */\n    ConvexMesh = 5,\n\n    /** Triangle mesh shape. */\n    TriangleMesh = 6,\n}\n\n/**\n * Mesh attribute enum.\n * @since 0.9.0\n */\nexport enum MeshAttribute {\n    /** Position attribute, 3 floats */\n    Position = 0,\n\n    /** Tangent attribute, 4 floats */\n    Tangent = 1,\n\n    /** Normal attribute, 3 floats */\n    Normal = 2,\n\n    /** Texture coordinate attribute, 2 floats */\n    TextureCoordinate = 3,\n\n    /** Color attribute, 4 floats, RGBA, range `0` to `1` */\n    Color = 4,\n\n    /** Joint id attribute, 8 unsigned ints */\n    JointId = 5,\n\n    /** Joint weights attribute, 8 floats */\n    JointWeight = 6,\n\n    /** @deprecated Deprecated, Secondary joint id attribute, should use JointId which has all 8 values instead */\n    SecondaryJointId = 7,\n\n    /** @deprecated Deprecated, Secondary joint weights attribute, should use JointWeight which has all 8 values instead */\n    SecondaryJointWeight = 8,\n}\n\n/**\n * Material parameter type.\n */\nexport enum MaterialParamType {\n    /** Unsigned integer parameter type. */\n    UnsignedInt = 0,\n    /** Integer parameter type. */\n    Int = 1,\n    /** Float parameter type. */\n    Float = 2,\n    /** Sampler resource parameter type, i.e., a {@link Texture}. */\n    Sampler = 3,\n    /**\n     * Font resource parameter type.\n     *\n     * **Note**: Changing font isn't exposed yet and will raise an error.\n     */\n    Font = 4,\n}\n\n/**\n * Constants.\n */\n\n/**\n * Default world up vector.\n */\nconst UP_VECTOR = [0, 1, 0];\n\n/**\n * Provides global scene functionality like raycasting.\n */\nexport class Scene {\n    /** Called before rendering the scene */\n    onPreRender: (() => void)[];\n    /** Called after the scene has been rendered */\n    onPostRender: (() => void)[];\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /** Ray hit pointer in WASM heap. @hidden */\n    private _rayHit: number;\n    /** Ray hit. @hidden */\n    private _hit: RayHit;\n\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n        this._rayHit = engine.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this._engine, this._rayHit);\n\n        /* Hidden property, list of functions to call after a\n         * frame has been rendered */\n        this.onPreRender = [];\n        this.onPostRender = [];\n    }\n\n    /**\n     * Currently active view components.\n     */\n    get activeViews(): ViewComponent[] {\n        const wasm = this._engine.wasm;\n        const count = wasm._wl_scene_get_active_views(this._engine.wasm._tempMem, 16);\n\n        const views: ViewComponent[] = [];\n        const viewTypeIndex = wasm._typeIndexFor('view');\n        for (let i = 0; i < count; ++i) {\n            views.push(\n                new ViewComponent(\n                    this._engine,\n                    viewTypeIndex,\n                    this._engine.wasm._tempMemInt[i]\n                )\n            );\n        }\n\n        return views;\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting objects.\n     *\n     * The resulting ray hit will contain up to **4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param group Collision group to filter by: only objects that are\n     *        part of given group are considered for raycast.\n     *\n     * @returns The scene cached {@link RayHit} instance.\n     * @note The returned object is owned by the Scene instance\n     *   will be reused with the next {@link Scene#rayCast} call.\n     */\n    rayCast(o: number[], d: number[], group: number): RayHit {\n        this._engine.wasm._wl_scene_ray_cast(\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            group,\n            this._rayHit\n        );\n        return this._hit;\n    }\n\n    /**\n     * Add an object to the scene.\n     *\n     * @param parent Parent object or `null`.\n     * @returns A newly created object.\n     */\n    addObject(parent: $Object | null): $Object {\n        const parentId = parent ? parent.objectId : 0;\n        const objectId = this._engine.wasm._wl_scene_add_object(parentId);\n        return this._engine.wrapObject(objectId);\n    }\n\n    /**\n     * Batch-add objects to the scene.\n     *\n     * Will provide better performance for adding multiple objects (e.g. > 16)\n     * than calling {@link Scene#addObject} repeatedly in a loop.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param count Number of objects to add.\n     * @param parent Parent object or `null`, default `null`.\n     * @param componentCountHint Hint for how many components in total will\n     *      be added to the created objects afterwards, default `0`.\n     * @returns Newly created objects\n     */\n    addObjects(\n        count: number,\n        parent: $Object | null,\n        componentCountHint: number\n    ): $Object[] {\n        const parentId = parent ? parent.objectId : 0;\n        this._engine.wasm.requireTempMem(count * 2);\n        const actualCount = this._engine.wasm._wl_scene_add_objects(\n            parentId,\n            count,\n            componentCountHint || 0,\n            this._engine.wasm._tempMem,\n            this._engine.wasm._tempMemSize >> 1\n        );\n        const ids = this._engine.wasm._tempMemUint16.subarray(0, actualCount);\n        const wrapper = this._engine.wrapObject.bind(this._engine);\n        const objects = Array.from(ids, wrapper);\n        return objects;\n    }\n\n    /**\n     * Pre-allocate memory for a given amount of objects and components.\n     *\n     * Will provide better performance for adding objects later with {@link Scene#addObject}\n     * and {@link Scene#addObjects}.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param objectCount Number of objects to add.\n     * @param componentCountPerType Amount of components to\n     *      allocate for {@link Object.addComponent}, e.g. `{mesh: 100, collision: 200, \"my-comp\": 100}`.\n     * @since 0.8.10\n     */\n    reserveObjects(objectCount: number, componentCountPerType: {[key: string]: number}) {\n        const wasm = this._engine.wasm;\n        componentCountPerType = componentCountPerType || {};\n        const jsManagerIndex = wasm._typeIndexFor('js');\n        let countsPerTypeIndex = wasm._tempMemInt.subarray();\n        countsPerTypeIndex.fill(0);\n        for (const e of Object.entries(componentCountPerType)) {\n            const typeIndex = wasm._typeIndexFor(e[0]);\n            countsPerTypeIndex[typeIndex < 0 ? jsManagerIndex : typeIndex] += e[1];\n        }\n        wasm._wl_scene_reserve_objects(objectCount, wasm._tempMem);\n    }\n\n    /**\n     * Set the background clear color.\n     *\n     * @param color new clear color (RGBA).\n     * @since 0.8.5\n     */\n    set clearColor(color: number[]) {\n        this._engine.wasm._wl_scene_set_clearColor(color[0], color[1], color[2], color[3]);\n    }\n\n    /**\n     * Set whether to clear the color framebuffer before drawing.\n     *\n     * This function is useful if an external framework (e.g. an AR tracking\n     * framework) is responsible for drawing a camera frame before Wonderland\n     * Engine draws the scene on top of it.\n     *\n     * @param b Whether to enable color clear.\n     * @since 0.9.4\n     */\n    set colorClearEnabled(b: boolean) {\n        this._engine.wasm._wl_scene_enableColorClear(b);\n    }\n\n    /**\n     * Load a scene file (.bin)\n     *\n     * Will replace the currently active scene with the one loaded\n     * from given file. It is assumed that JavaScript components required by\n     * the new scene were registered in advance.\n     *\n     * @param filename Path to the .bin file.\n     */\n    load(filename: string) {\n        const wasm = this._engine.wasm;\n        const strLen = wasm.lengthBytesUTF8(filename) + 1;\n        const ptr = wasm._tempMem;\n        wasm.stringToUTF8(filename, ptr, strLen);\n        wasm._wl_load_scene(ptr);\n    }\n\n    /**\n     * Load an external 3D file (.gltf, .glb).\n     *\n     * Loads and parses the gltf file and its images and appends the result\n     * to scene.\n     *\n     * ```js\n     * WL.scene.append(filename).then(root => {\n     *     // root contains the loaded scene\n     * });\n     * ```\n     *\n     * In case the `loadGltfExtensions` option is set to true, the response\n     * will be an object containing both the root of the loaded scene and\n     * any glTF extensions found on nodes, meshes and the root of the file.\n     *\n     * ```js\n     * WL.scene.append(filename, { loadGltfExtensions: true }).then(({root, extensions}) => {\n     *     // root contains the loaded scene\n     *     // extensions.root contains any extensions at the root of glTF document\n     *     const rootExtensions = extensions.root;\n     *     // extensions.mesh and extensions.node contain extensions indexed by Object id\n     *     const childObject = root.children[0];\n     *     const meshExtensions = root.meshExtensions[childObject.objectId];\n     *     const nodeExtensions = root.nodeExtensions[childObject.objectId];\n     *     // extensions.idMapping contains a mapping from glTF node index to Object id\n     * });\n     * ```\n     *\n     * @param filename Path to the .gltf or .glb file.\n     * @param options Additional options for loading.\n     * @returns Root of the loaded scene.\n     */\n    append(filename: string, options: Record<any, string>): Promise<SceneAppendResult> {\n        options = options || {};\n        const loadGltfExtensions = !!options.loadGltfExtensions;\n\n        const wasm = this._engine.wasm;\n\n        const strLen = wasm.lengthBytesUTF8(filename) + 1;\n        const ptr = wasm._tempMem;\n        wasm.stringToUTF8(filename, ptr, strLen);\n        const callback = wasm._sceneLoadedCallback.length;\n        const promise = new Promise((resolve: (r: SceneAppendResult) => void, reject) => {\n            wasm._sceneLoadedCallback[callback] = {\n                success: (id: number, extensions: Record<string, any>) => {\n                    const root = this._engine.wrapObject(id);\n                    resolve(extensions ? {root, extensions} : root);\n                },\n                error: () => reject(),\n            };\n        });\n\n        wasm._wl_append_scene(ptr, loadGltfExtensions, callback);\n        return promise;\n    }\n\n    /**\n     * Unmarshalls the GltfExtensions from an Uint32Array.\n     *\n     * @param data Array containing the gltf extension data.\n     * @returns The extensions stored in an object literal.\n     *\n     * @hidden\n     */\n    _unmarshallGltfExtensions(data: Uint32Array): GLTFExtensions {\n        /* @todo: This method should be moved in the internal Emscripten library. */\n        const extensions: GLTFExtensions = {\n            root: {},\n            mesh: {},\n            node: {},\n            idMapping: {},\n        };\n\n        let index = 0;\n        const readString = () => {\n            const strPtr = data[index++];\n            const strLen = data[index++];\n            return this._engine.wasm.UTF8ViewToString(strPtr, strPtr + strLen);\n        };\n\n        const idMappingSize = data[index++];\n        const idMapping = new Array(idMappingSize);\n        for (let i = 0; i < idMappingSize; ++i) {\n            idMapping[i] = data[index++];\n        }\n        extensions.idMapping = idMapping;\n\n        const meshExtensionsSize = data[index++];\n        for (let i = 0; i < meshExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.mesh[idMapping[objectId]] = JSON.parse(readString());\n        }\n        const nodeExtensionsSize = data[index++];\n        for (let i = 0; i < nodeExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.node[idMapping[objectId]] = JSON.parse(readString());\n        }\n        const rootExtensionsStr = readString();\n        if (rootExtensionsStr) {\n            extensions.root = JSON.parse(rootExtensionsStr);\n        }\n\n        return extensions;\n    }\n\n    /**\n     * Reset the scene.\n     *\n     * This method deletes all used and allocated objects, and components.\n     */\n    reset() {\n        this._engine.wasm._wl_scene_reset();\n    }\n}\n\n/**\n * Native component\n *\n * Provides access to a native component instance of a specified component type.\n *\n * Usage example:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myBoolean: { type: Type.Boolean, default: false },\n *     };\n *     start() {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     update(dt) {}\n * }\n * ```\n */\nexport class Component {\n    /**\n     * Unique identifier for this component class.\n     *\n     * This is used to register, add, and retrieve component of a given type.\n     */\n    static TypeName: string;\n\n    /**\n     * Properties of this component class.\n     *\n     * Properties are public attributes that can be configured via the\n     * Wonderland Editor.\n     *\n     * Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myBoolean: { type: Type.Boolean, default: false },\n     *         myFloat: { type: Type.Float, default: false },\n     *         myTexture: { type: Type.Texture, default: null },\n     *     };\n     * }\n     * ```\n     *\n     * Properties are automatically added to each component instance, and are\n     * accessible like any JS attribute:\n     *\n     * ```js\n     * // Creates a new component and set each properties value:\n     * const myComponent = object.addComponent(MyComponent, {\n     *     myBoolean: true,\n     *     myFloat: 42.0,\n     *     myTexture: null\n     * });\n     *\n     * // You can also override the properties on the instance:\n     * myComponent.myBoolean = false;\n     * myComponent.myFloat = -42.0;\n     * ```\n     */\n    static Properties: Record<string, CustomParameter>;\n\n    /**\n     * Triggered when the component is initialized by the runtime. This method\n     * will only be triggered **once** after instantiation.\n     */\n    init?(): void;\n\n    /**\n     * Triggered when the component is started by the runtime, or activated.\n     *\n     * You can use that to re-initialize the state of the component.\n     */\n    start?(): void;\n\n    /**\n     * Triggered  **every frame** by the runtime.\n     *\n     * You should perform your business logic in this method. Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * class TranslateForwardComponent extends Component {\n     *     static TypeName = 'translate-forward-component';\n     *     static Properties = {\n     *         speed: { type: Type.Float, default: 1.0 }\n     *     };\n     *     constructor() {\n     *         this._forward = new Float32Array([0, 0, 0]);\n     *     }\n     *     update(dt) {\n     *         this.object.getForward(this._forward);\n     *         this._forward[0] *= this.speed;\n     *         this._forward[1] *= this.speed;\n     *         this._forward[2] *= this.speed;\n     *         this.object.translate(this._forward);\n     *     }\n     * }\n     * ```\n     *\n     * @param delta Elapsed time between this frame and the previous one, in **seconds**.\n     */\n    update?(delta: number): void;\n\n    /**\n     * Triggered when the component goes from an inactive state to an active state.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onActivate?(): void;\n\n    /**\n     * Triggered when the component goes from an activated state to an inactive state.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    onDeactivate?(): void;\n\n    /**\n     * Triggered when the component is removed from its object.\n     *\n     * @note You can remove a component using: {@link Component.destroy}.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?(): void;\n\n    /** Manager index. @hidden */\n    readonly _manager: number;\n    /** Instance index. @hidden */\n    readonly _id: number;\n\n    /**\n     * Object containing this object.\n     *\n     * **Note**: This is cached for faster retrieval.\n     *\n     * @hidden\n     */\n    _object: $Object | null;\n\n    /**\n     * Component's typename, e.g., 'my-component'.\n     *\n     * @todo: Should be deprecated. Constructor should be looked up instead.\n     *\n     * @hidden\n     */\n    _type: string | null;\n\n    /** Wonderland Engine instance */\n    protected readonly _engine: WonderlandEngine;\n\n    /**\n     * Create a new instance\n     *\n     * @param engine The engine instance.\n     * @param manager Index of the manager.\n     * @param id WASM component instance index.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, manager: number = -1, id: number = -1) {\n        this._engine = engine;\n        this._manager = manager;\n        this._id = id;\n        this._object = null;\n        this._type = null;\n    }\n\n    /** Engine's instance. */\n    get engine(): WonderlandEngine {\n        return this._engine;\n    }\n\n    /** The name of this component's type */\n    get type(): string {\n        return this._type || this._engine.wasm._typeNameFor(this._manager);\n    }\n\n    /** The object this component is attached to. */\n    get object(): $Object {\n        if (!this._object) {\n            const objectId = this._engine.wasm._wl_component_get_object(\n                this._manager,\n                this._id\n            );\n            this._object = this._engine.wrapObject(objectId);\n        }\n        return this._object;\n    }\n\n    /**\n     * Set whether this component is active.\n     *\n     * Activating/deactivating a component comes at a small cost of reordering\n     * components in the respective component manager. This function therefore\n     * is not a trivial assignment.\n     *\n     * Does nothing if the component is already activated/deactivated.\n     *\n     * @param active New active state.\n     */\n    set active(active: boolean) {\n        this._engine.wasm._wl_component_setActive(this._manager, this._id, active);\n    }\n\n    /**\n     * Whether this component is active\n     */\n    get active(): boolean {\n        return this._engine.wasm._wl_component_isActive(this._manager, this._id) != 0;\n    }\n\n    /**\n     * Remove this component from its objects and destroy it.\n     *\n     * It is best practice to set the component to `null` after,\n     * to ensure it does not get used later.\n     *\n     * ```js\n     *    c.destroy();\n     *    c = null;\n     * ```\n     * @since 0.9.0\n     */\n    destroy(): void {\n        this._engine.wasm._wl_component_remove(this._manager, this._id);\n\n        /* @todo: shouldn't be set to undefined. */\n        // @ts-ignore\n        this._manager = undefined;\n        // @ts-ignore\n        this._id = undefined;\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native component ids\n     * and component manager types are equal.\n     *\n     * @param otherComponent Component to check equality with.\n     * @returns Whether this component equals the given component.\n     */\n    equals(otherComponent: Component | undefined | null): boolean {\n        if (!otherComponent) return false;\n        return this._manager == otherComponent._manager && this._id == otherComponent._id;\n    }\n}\n\n/**\n * Native collision component.\n *\n * Provides access to a native collision component instance.\n */\nexport class CollisionComponent extends Component {\n    /** @override */\n    static TypeName = 'collision';\n\n    /** Collision component collider */\n    @property()\n    get collider(): Collider {\n        return this._engine.wasm._wl_collision_component_get_collider(this._id);\n    }\n\n    /**\n     * Set collision component collider.\n     *\n     * @param collider Collider of the collision component.\n     */\n    set collider(collider: Collider) {\n        this._engine.wasm._wl_collision_component_set_collider(this._id, collider);\n    }\n\n    /**\n     * Collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the returned vector is used.\n     */\n    @property()\n    get extents(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_collision_component_get_extents(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the passed vector is used.\n     *\n     * Example:\n     *\n     * ```js\n     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.\n     * collision.extent = [1, 2, 3];\n     * ```\n     *\n     * @param extents Extents of the collision component, expects a\n     *      3 component array.\n     */\n    set extents(extents: Readonly<NumberArray>) {\n        this.extents.set(extents);\n    }\n\n    /**\n     * Collision component group.\n     *\n     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}\n     * or the group in {@link Scene#rayCast}.\n     *\n     * Colliders that have no common groups will not overlap with each other. If a collider\n     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.\n     *\n     * Each bit represents belonging to a group, see example.\n     *\n     * ```js\n     *    // c belongs to group 2\n     *    c.group = (1 << 2);\n     *\n     *    // c belongs to group 0\n     *    c.group = (1 << 0);\n     *\n     *    // c belongs to group 0 *and* 2\n     *    c.group = (1 << 0) | (1 << 2);\n     *\n     *    (c.group & (1 << 2)) != 0; // true\n     *    (c.group & (1 << 7)) != 0; // false\n     * ```\n     */\n    @property()\n    get group(): number {\n        return this._engine.wasm._wl_collision_component_get_group(this._id);\n    }\n\n    /**\n     * Set collision component group.\n     *\n     * @param group Group mask of the collision component.\n     */\n    set group(group: number) {\n        this._engine.wasm._wl_collision_component_set_group(this._id, group);\n    }\n\n    /**\n     * Query overlapping objects.\n     *\n     * Usage:\n     *\n     * ```js\n     * const collision = object.getComponent('collision');\n     * const overlaps = collision.queryOverlaps();\n     * for(const otherCollision of overlaps) {\n     *     const otherObject = otherCollision.object;\n     *     console.log(`Collision with object ${otherObject.objectId}`);\n     * }\n     * ```\n     *\n     * @returns Collision components overlapping this collider.\n     */\n    queryOverlaps(): CollisionComponent[] {\n        const count = this._engine.wasm._wl_collision_component_query_overlaps(\n            this._id,\n            this._engine.wasm._tempMem,\n            this._engine.wasm._tempMemSize >> 1\n        );\n        let overlaps = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            overlaps[i] = new CollisionComponent(\n                this._engine,\n                this._manager,\n                this._engine.wasm._tempMemUint16[i]\n            );\n        }\n        return overlaps;\n    }\n}\n\n/**\n * Native text component\n *\n * Provides access to a native text component instance\n */\nexport class TextComponent extends Component {\n    /** @override */\n    static TypeName = 'text';\n\n    /** Text component alignment. */\n    @property()\n    get alignment(): Alignment {\n        return this._engine.wasm._wl_text_component_get_horizontal_alignment(this._id);\n    }\n\n    /**\n     * Set text component alignment.\n     *\n     * @param alignment Alignment for the text component.\n     */\n    set alignment(alignment: Alignment) {\n        this._engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);\n    }\n\n    /** Text component justification. */\n    @property()\n    get justification(): Justification {\n        return this._engine.wasm._wl_text_component_get_vertical_alignment(this._id);\n    }\n\n    /**\n     * Set text component justification.\n     *\n     * @param justification Justification for the text component.\n     */\n    set justification(justification: Justification) {\n        this._engine.wasm._wl_text_component_set_vertical_alignment(\n            this._id,\n            justification\n        );\n    }\n\n    /** Text component character spacing. */\n    @property()\n    get characterSpacing(): number {\n        return this._engine.wasm._wl_text_component_get_character_spacing(this._id);\n    }\n\n    /**\n     * Set text component character spacing.\n     *\n     * @param spacing Character spacing for the text component.\n     */\n    set characterSpacing(spacing) {\n        this._engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);\n    }\n\n    /** Text component line spacing. */\n    @property()\n    get lineSpacing(): number {\n        return this._engine.wasm._wl_text_component_get_line_spacing(this._id);\n    }\n\n    /**\n     * Set text component line spacing\n     *\n     * @param spacing Line spacing for the text component\n     */\n    set lineSpacing(spacing: number) {\n        this._engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);\n    }\n\n    /** Text component effect. */\n    @property()\n    get effect(): TextEffect {\n        return this._engine.wasm._wl_text_component_get_effect(this._id);\n    }\n\n    /**\n     * Set text component effect\n     *\n     * @param effect Effect for the text component\n     */\n    set effect(effect: TextEffect) {\n        this._engine.wasm._wl_text_component_set_effect(this._id, effect);\n    }\n\n    /** Text component text. */\n    @property()\n    get text(): string {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_text_component_get_text(this._id);\n        return wasm.UTF8ToString(ptr);\n    }\n\n    /**\n     * Set text component text.\n     *\n     * @param text Text of the text component.\n     */\n    set text(text: string) {\n        const wasm = this._engine.wasm;\n        const strLen = wasm.lengthBytesUTF8(text) + 1;\n        wasm.requireTempMem(strLen);\n        const ptr = wasm._tempMem;\n        wasm.stringToUTF8(text, ptr, strLen);\n        wasm._wl_text_component_set_text(this._id, ptr);\n    }\n\n    /**\n     * Set material to render the text with.\n     *\n     * @param material New material.\n     */\n    set material(material: Material | null | undefined) {\n        const matIndex = material ? material._index : 0;\n        this._engine.wasm._wl_text_component_set_material(this._id, matIndex);\n    }\n\n    /** Material used to render the text. */\n    @property()\n    get material(): Material | null {\n        const id = this._engine.wasm._wl_text_component_get_material(this._id);\n        return id > 0 ? new Material(this._engine, id) : null;\n    }\n}\n\n/**\n * Native view component.\n *\n * Provides access to a native view component instance.\n */\nexport class ViewComponent extends Component {\n    /** @override */\n    static TypeName = 'view';\n\n    /** Projection matrix. */\n    @enumerable()\n    get projectionMatrix(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_view_component_get_projection_matrix(this._id),\n            16\n        );\n    }\n\n    /** ViewComponent near clipping plane value. */\n    @property()\n    get near(): number {\n        return this._engine.wasm._wl_view_component_get_near(this._id);\n    }\n\n    /**\n     * Set near clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param near Near depth value.\n     */\n    set near(near: number) {\n        this._engine.wasm._wl_view_component_set_near(this._id, near);\n    }\n\n    /** Far clipping plane value. */\n    @property()\n    get far(): number {\n        return this._engine.wasm._wl_view_component_get_far(this._id);\n    }\n\n    /**\n     * Set far clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param far Near depth value.\n     */\n    set far(far: number) {\n        this._engine.wasm._wl_view_component_set_far(this._id, far);\n    }\n\n    /**\n     * Get the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, this returns the field of view reported by\n     * the device, regardless of the fov that was set.\n     */\n    @property()\n    get fov(): number {\n        return this._engine.wasm._wl_view_component_get_fov(this._id);\n    }\n\n    /**\n     * Set the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, the field of view reported by the device is\n     * used and this value is ignored. After the XR session ends, the new value\n     * is applied.\n     *\n     * @param fov Horizontal field of view, **in degrees**.\n     */\n    set fov(fov) {\n        this._engine.wasm._wl_view_component_set_fov(this._id, fov);\n    }\n}\n\n/**\n * Native input component.\n *\n * Provides access to a native input component instance.\n */\nexport class InputComponent extends Component {\n    /** @override */\n    static TypeName = 'input';\n\n    /** Input component type */\n    @property()\n    get inputType(): InputType {\n        return this._engine.wasm._wl_input_component_get_type(this._id);\n    }\n\n    /**\n     * Set input component type.\n     *\n     * @params New input component type.\n     */\n    set inputType(type: InputType) {\n        this._engine.wasm._wl_input_component_set_type(this._id, type);\n    }\n\n    /**\n     * WebXR Device API input source associated with this input component,\n     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.\n     */\n    @enumerable()\n    get xrInputSource(): XRInputSource | null {\n        const xrSession = this._engine.xrSession;\n        if (xrSession) {\n            for (let inputSource of xrSession.inputSources) {\n                if (inputSource.handedness == this.handedness) {\n                    return inputSource;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.\n     */\n    @enumerable()\n    get handedness(): 'left' | 'right' | null {\n        const inputType = this.inputType;\n        if (\n            inputType == InputType.ControllerRight ||\n            inputType == InputType.RayRight ||\n            inputType == InputType.EyeRight\n        )\n            return 'right';\n        if (\n            inputType == InputType.ControllerLeft ||\n            inputType == InputType.RayLeft ||\n            inputType == InputType.EyeLeft\n        )\n            return 'left';\n\n        return null;\n    }\n}\n\n/**\n * Native light component.\n *\n * Provides access to a native light component instance.\n */\nexport class LightComponent extends Component {\n    /** @override */\n    static TypeName = 'light';\n\n    /** View on the light color. */\n    @property()\n    get color(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_light_component_get_color(this._id),\n            4\n        );\n    }\n\n    /**\n     * Set light color.\n     *\n     * @param c Color of the light component.\n     */\n    set color(c: Readonly<NumberArray>) {\n        this.color.set(c);\n    }\n\n    /** Light type. */\n    @property()\n    get lightType(): LightType {\n        return this._engine.wasm._wl_light_component_get_type(this._id);\n    }\n\n    /**\n     * Set light type.\n     *\n     * @param lightType Type of the light component.\n     */\n    set lightType(t: LightType) {\n        this._engine.wasm._wl_light_component_set_type(this._id, t);\n    }\n}\n\n/**\n * Native animation component.\n *\n * Provides access to a native animation component instance.\n */\nexport class AnimationComponent extends Component {\n    /** @override */\n    static TypeName = 'animation';\n\n    /**\n     * Set animation to play.\n     *\n     * Make sure to {@link Animation#retarget} the animation to affect the\n     * right objects.\n     *\n     * @param anim Animation to play.\n     */\n    set animation(anim: Animation | null | undefined) {\n        this._engine.wasm._wl_animation_component_set_animation(\n            this._id,\n            anim ? anim._index : 0\n        );\n    }\n\n    /** Animation set for this component */\n    @property()\n    get animation(): Animation | null {\n        const id = this._engine.wasm._wl_animation_component_get_animation(this._id);\n        return id > 0 ? new Animation(this._engine, id) : null;\n    }\n\n    /**\n     * Set play count. Set to `0` to loop indefinitely.\n     *\n     * @param playCount Number of times to repeat the animation.\n     */\n    set playCount(playCount: number) {\n        this._engine.wasm._wl_animation_component_set_playCount(this._id, playCount);\n    }\n\n    /** Number of times the animation is played. */\n    @property()\n    get playCount(): number {\n        return this._engine.wasm._wl_animation_component_get_playCount(this._id);\n    }\n\n    /**\n     * Set speed. Set to negative values to run the animation backwards.\n     *\n     * Setting speed has an immediate effect for the current frame's update\n     * and will continue with the speed from the current point in the animation.\n     *\n     * @param speed New speed at which to play the animation.\n     * @since 0.8.10\n     */\n    set speed(speed: number) {\n        this._engine.wasm._wl_animation_component_set_speed(this._id, speed);\n    }\n\n    /**\n     * Speed factor at which the animation is played.\n     *\n     * @since 0.8.10\n     */\n    @property()\n    get speed(): number {\n        return this._engine.wasm._wl_animation_component_get_speed(this._id);\n    }\n\n    /** Current playing state of the animation */\n    @enumerable()\n    get state(): AnimationState {\n        return this._engine.wasm._wl_animation_component_state(this._id);\n    }\n\n    /**\n     * Play animation.\n     *\n     * If the animation is currently paused, resumes from that position. If the\n     * animation is already playing, does nothing.\n     *\n     * To restart the animation, {@link AnimationComponent#stop} it first.\n     */\n    play(): void {\n        this._engine.wasm._wl_animation_component_play(this._id);\n    }\n\n    /** Stop animation. */\n    stop(): void {\n        this._engine.wasm._wl_animation_component_stop(this._id);\n    }\n\n    /** Pause animation. */\n    pause(): void {\n        this._engine.wasm._wl_animation_component_pause(this._id);\n    }\n}\n\n/**\n * Native mesh component.\n *\n * Provides access to a native mesh component instance.\n */\nexport class MeshComponent extends Component {\n    /** @override */\n    static TypeName = 'mesh';\n\n    /**\n     * Set material to render the mesh with.\n     *\n     * @param material Material to render the mesh with.\n     */\n    set material(material: Material | null | undefined) {\n        this._engine.wasm._wl_mesh_component_set_material(\n            this._id,\n            material ? material._index : 0\n        );\n    }\n\n    /** Material used to render the mesh. */\n    @property()\n    get material(): Material | null {\n        const id = this._engine.wasm._wl_mesh_component_get_material(this._id);\n        return id > 0 ? new Material(this._engine, id) : null;\n    }\n\n    /** Mesh rendered by this component. */\n    @property()\n    get mesh(): Mesh | null {\n        const id = this._engine.wasm._wl_mesh_component_get_mesh(this._id);\n        return id > 0 ? new Mesh(this._engine, id) : null;\n    }\n\n    /**\n     * Set mesh to rendered with this component.\n     *\n     * @param mesh Mesh rendered by this component.\n     */\n    set mesh(mesh: Mesh | null | undefined) {\n        this._engine.wasm._wl_mesh_component_set_mesh(this._id, mesh ? mesh._index : 0);\n    }\n\n    /** Skin for this mesh component. */\n    @property()\n    get skin(): Skin | null {\n        const id = this._engine.wasm._wl_mesh_component_get_skin(this._id);\n        return id > 0 ? new Skin(this._engine, id) : null;\n    }\n\n    /**\n     * Set skin to transform this mesh component.\n     *\n     * @param skin Skin to use for rendering skinned meshes.\n     */\n    set skin(skin: Skin | null | undefined) {\n        this._engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._index : 0);\n    }\n}\n\n/**\n * Enum for Physics axes locking\n *\n * See {@link PhysXComponent.angularLockAxis} and {@link PhysXComponent.linearLockAxis}.\n */\nexport enum LockAxis {\n    /**\n     * No axis selected.\n     */\n    None = 0,\n\n    /**\n     * **X axis**:\n     */\n    X = 1 << 0,\n\n    /**\n     * **Y axis**:\n     */\n    Y = 1 << 1,\n\n    /**\n     * **Z axis**:\n     */\n    Z = 1 << 2,\n}\n\n/**\n * Native physx rigid body component.\n *\n * Provides access to a native mesh component instance.\n * Only available when using physx enabled runtime, see \"Project Settings > Runtime\".\n */\nexport class PhysXComponent extends Component {\n    /** @override */\n    static TypeName = 'physx';\n\n    /**\n     * Set whether this rigid body is static.\n     *\n     * Setting this property only takes effect once the component\n     * switches from inactive to active.\n     *\n     * @param b Whether the rigid body should be static.\n     */\n    set static(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_static(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is static.\n     *\n     * This property returns whether the rigid body is *effectively*\n     * static. If static property was set while the rigid body was\n     * active, it will not take effect until the rigid body is set\n     * inactive and active again. Until the component is set inactive,\n     * this getter will return whether the rigid body is actually\n     * static.\n     */\n    @property()\n    get static(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_static(this._id);\n    }\n\n    /**\n     * Set whether this rigid body is kinematic.\n     *\n     * @param b Whether the rigid body should be kinematic.\n     */\n    set kinematic(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_kinematic(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is kinematic.\n     */\n    @property()\n    get kinematic(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_kinematic(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's gravity is enabled.\n     *\n     * @param b Whether the rigid body's gravity should be enabled.\n     */\n    set gravity(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_gravity(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's gravity flag is enabled.\n     */\n    @property()\n    get gravity(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_gravity(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's simulate flag is enabled.\n     *\n     * @param b Whether the rigid body's simulate flag should be enabled.\n     */\n    set simulate(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_simulate(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's simulate flag is enabled.\n     */\n    @property()\n    get simulate(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_simulate(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's allowSimulation flag is enabled.\n     * AllowSimulation and trigger can not be enabled at the same time.\n     * Enabling allowSimulation while trigger is enabled,\n     * will disable trigger.\n     *\n     * @param b Whether the rigid body's allowSimulation flag should be enabled.\n     */\n    set allowSimulation(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's allowSimulation flag is enabled.\n     */\n    @property()\n    get allowSimulation(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_allowSimulation(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's allowQuery flag is enabled.\n     *\n     * @param b Whether the rigid body's allowQuery flag should be enabled.\n     */\n    set allowQuery(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_allowQuery(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's allowQuery flag is enabled.\n     */\n    @property()\n    get allowQuery(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_allowQuery(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's trigger flag is enabled.\n     * AllowSimulation and trigger can not be enabled at the same time.\n     * Enabling trigger while allowSimulation is enabled,\n     * will disable allowSimulation.\n     *\n     * @param b Whether the rigid body's trigger flag should be enabled.\n     */\n    set trigger(b: boolean) {\n        this._engine.wasm._wl_physx_component_set_trigger(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's trigger flag is enabled.\n     */\n    @property()\n    get trigger(): boolean {\n        return !!this._engine.wasm._wl_physx_component_get_trigger(this._id);\n    }\n\n    /**\n     * Set the shape for collision detection.\n     *\n     * @param s New shape.\n     * @since 0.8.5\n     */\n    set shape(s: Shape) {\n        this._engine.wasm._wl_physx_component_set_shape(this._id, s);\n    }\n\n    /** The shape for collision detection. */\n    @property()\n    get shape(): Shape {\n        return this._engine.wasm._wl_physx_component_get_shape(this._id);\n    }\n\n    /**\n     * Set additional data for the shape.\n     *\n     * Retrieved only from {@link PhysXComponent#shapeData}.\n     * @since 0.8.10\n     */\n    set shapeData(d) {\n        /* @todo: The array includes is useless and slow. */\n        if (d == null || ![Shape.TriangleMesh, Shape.ConvexMesh].includes(this.shape))\n            return;\n        this._engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);\n    }\n\n    /**\n     * Additional data for the shape.\n     *\n     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.\n     * `{index: n}` for `TriangleMesh` and `ConvexHull`.\n     *\n     * This data is currently only for passing onto or creating other {@link PhysXComponent}.\n     * @since 0.8.10\n     */\n    @property()\n    get shapeData(): {index: number} | null {\n        if (![Shape.TriangleMesh, Shape.ConvexMesh].includes(this.shape)) return null;\n        return {index: this._engine.wasm._wl_physx_component_get_shape_data(this._id)};\n    }\n\n    /**\n     * Set the shape extents for collision detection.\n     *\n     * @param e New extents for the shape.\n     * @since 0.8.5\n     */\n    set extents(e: Readonly<NumberArray>) {\n        this.extents.set(e);\n    }\n\n    /**\n     * The shape extents for collision detection.\n     */\n    @property()\n    get extents(): Float32Array {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_physx_component_get_extents(this._id);\n        return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);\n    }\n\n    /**\n     * Get staticFriction.\n     */\n    @property()\n    get staticFriction(): number {\n        return this._engine.wasm._wl_physx_component_get_staticFriction(this._id);\n    }\n\n    /**\n     * Set staticFriction.\n     * @param v New staticFriction.\n     */\n    set staticFriction(v: number) {\n        this._engine.wasm._wl_physx_component_set_staticFriction(this._id, v);\n    }\n\n    /**\n     * Get dynamicFriction.\n     */\n    @property()\n    get dynamicFriction(): number {\n        return this._engine.wasm._wl_physx_component_get_dynamicFriction(this._id);\n    }\n\n    /**\n     * Set dynamicFriction\n     * @param v New dynamicDamping.\n     */\n    set dynamicFriction(v: number) {\n        this._engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);\n    }\n\n    /**\n     * Get bounciness.\n     * @since 0.9.0\n     */\n    @property()\n    get bounciness(): number {\n        return this._engine.wasm._wl_physx_component_get_bounciness(this._id);\n    }\n\n    /**\n     * Set bounciness.\n     * @param v New bounciness.\n     * @since 0.9.0\n     */\n    set bounciness(v: number) {\n        this._engine.wasm._wl_physx_component_set_bounciness(this._id, v);\n    }\n\n    /**\n     * Get linearDamping/\n     */\n    @property()\n    get linearDamping(): number {\n        return this._engine.wasm._wl_physx_component_get_linearDamping(this._id);\n    }\n\n    /**\n     * Set linearDamping.\n     * @param v New linearDamping.\n     */\n    set linearDamping(v: number) {\n        this._engine.wasm._wl_physx_component_set_linearDamping(this._id, v);\n    }\n\n    /** Get angularDamping. */\n    @property()\n    get angularDamping(): number {\n        return this._engine.wasm._wl_physx_component_get_angularDamping(this._id);\n    }\n\n    /**\n     * Set angularDamping.\n     * @param v New angularDamping.\n     */\n    set angularDamping(v: number) {\n        this._engine.wasm._wl_physx_component_set_angularDamping(this._id, v);\n    }\n\n    /**\n     * Set linear velocity.\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New linear velocity.\n     */\n    set linearVelocity(v: Readonly<NumberArray>) {\n        this._engine.wasm._wl_physx_component_set_linearVelocity(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /** Linear velocity or `[0, 0, 0]` if the component is not active. */\n    @property()\n    get linearVelocity(): Float32Array {\n        const wasm = this._engine.wasm;\n        wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set angular velocity\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New angular velocity\n     */\n    set angularVelocity(v: Readonly<NumberArray>) {\n        this._engine.wasm._wl_physx_component_set_angularVelocity(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /** Angular velocity or `[0, 0, 0]` if the component is not active. */\n    @property()\n    get angularVelocity(): Float32Array {\n        const wasm = this._engine.wasm;\n        wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n\n    /**\n     * Set the components groups mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set groupsMask(flags: number) {\n        this._engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);\n    }\n\n    /**\n     * Get the components groups mask flags.\n     *\n     * Each bit represents membership to group, see example.\n     *\n     * ```js\n     * // Assign c to group 2\n     * c.groupsMask = (1 << 2);\n     *\n     * // Assign c to group 0\n     * c.groupsMask  = (1 << 0);\n     *\n     * // Assign c to group 0 and 2\n     * c.groupsMask = (1 << 0) | (1 << 2);\n     *\n     * (c.groupsMask & (1 << 2)) != 0; // true\n     * (c.groupsMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @property()\n    get groupsMask(): number {\n        return this._engine.wasm._wl_physx_component_get_groupsMask(this._id);\n    }\n\n    /**\n     * Set the components blocks mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set blocksMask(flags: number) {\n        this._engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);\n    }\n\n    /**\n     * Get the components blocks mask flags.\n     *\n     * Each bit represents membership to the block, see example.\n     *\n     * ```js\n     * // Block overlap with any objects in group 2\n     * c.blocksMask = (1 << 2);\n     *\n     * // Block overlap with any objects in group 0\n     * c.blocksMask  = (1 << 0)\n     *\n     * // Block overlap with any objects in group 0 and 2\n     * c.blocksMask = (1 << 0) | (1 << 2);\n     *\n     * (c.blocksMask & (1 << 2)) != 0; // true\n     * (c.blocksMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    @property()\n    get blocksMask(): number {\n        return this._engine.wasm._wl_physx_component_get_blocksMask(this._id);\n    }\n\n    /**\n     * Set axes to lock for linear velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * Combine flags with Bitwise OR.\n     * ```js\n     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.linearLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set linearLockAxis(lock: LockAxis) {\n        this._engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the linear lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.\n     *\n     * ```js\n     * if(body.linearLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for linear movement.\n     */\n    @property()\n    get linearLockAxis(): LockAxis {\n        return this._engine.wasm._wl_physx_component_get_linearLockAxis(this._id);\n    }\n\n    /**\n     * Set axes to lock for angular velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * ```js\n     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.angularLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set angularLockAxis(lock: LockAxis) {\n        this._engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);\n    }\n\n    /**\n     * Get the angular lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.\n     *\n     * ```js\n     * if(body.angularLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for angular movement.\n     */\n    @property()\n    get angularLockAxis(): LockAxis {\n        return this._engine.wasm._wl_physx_component_get_angularLockAxis(this._id);\n    }\n\n    /**\n     * Set mass.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * @param m New mass.\n     */\n    set mass(m: number) {\n        this._engine.wasm._wl_physx_component_set_mass(this._id, m);\n    }\n\n    /** Mass */\n    @property()\n    get mass(): number {\n        return this._engine.wasm._wl_physx_component_get_mass(this._id);\n    }\n\n    /**\n     * Set mass space interia tensor.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New mass space interatia tensor.\n     */\n    set massSpaceInteriaTensor(v: Readonly<NumberArray>) {\n        this._engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(\n            this._id,\n            v[0],\n            v[1],\n            v[2]\n        );\n    }\n\n    /**\n     * Apply a force.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     * @param localForce Whether the force vector is in local space, default `false`.\n     * @param p Position to apply force at, default is center of mass.\n     * @param local Whether position is in local space, default `false`.\n     */\n    addForce(\n        f: Readonly<NumberArray>,\n        m?: ForceMode,\n        localForce?: boolean,\n        p?: Readonly<NumberArray>,\n        local?: boolean\n    ) {\n        /* @todo: `localForce` should be a boolean`. */\n        m = m || ForceMode.Force;\n        if (!p) {\n            this._engine.wasm._wl_physx_component_addForce(\n                this._id,\n                f[0],\n                f[1],\n                f[2],\n                m,\n                !!localForce\n            );\n        } else {\n            this._engine.wasm._wl_physx_component_addForceAt(\n                this._id,\n                f[0],\n                f[1],\n                f[2],\n                m,\n                !!localForce,\n                p[0],\n                p[1],\n                p[2],\n                !!local\n            );\n        }\n    }\n\n    /**\n     * Apply torque.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     */\n    addTorque(f: Readonly<NumberArray>, m: ForceMode = ForceMode.Force) {\n        this._engine.wasm._wl_physx_component_addTorque(this._id, f[0], f[1], f[2], m);\n    }\n\n    /**\n     * Add on collision callback.\n     *\n     * @param callback Function to call when this rigid body (un)collides with any other.\n     *\n     * ```js\n     *  let rigidBody = this.object.getComponent('physx');\n     *  rigidBody.onCollision(function(type, other) {\n     *      // Ignore uncollides\n     *      if(type == CollisionEventType.TouchLost) return;\n     *\n     *      // Take damage on collision with enemies\n     *      if(other.object.name.startsWith('enemy-')) {\n     *          this.applyDamage(10);\n     *      }\n     *  }.bind(this));\n     * ```\n     *\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollision(callback: CollisionCallback): number {\n        return this.onCollisionWith(this, callback);\n    }\n\n    /**\n     * Add filtered on collision callback.\n     *\n     * @param otherComp Component for which callbacks will\n     *        be triggered. If you pass this component, the method is equivalent to.\n     *        {@link PhysXComponent#onCollision}.\n     * @param callback Function to call when this rigid body\n     *        (un)collides with `otherComp`.\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollisionWith(otherComp: this, callback: CollisionCallback): number {\n        const physics = this._engine.physics;\n        physics!._callbacks[this._id] = physics!._callbacks[this._id] || [];\n        physics!._callbacks[this._id].push(callback);\n        return this._engine.wasm._wl_physx_component_addCallback(\n            this._id,\n            otherComp._id || this._id\n        );\n    }\n\n    /**\n     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     *\n     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     * @throws When the callback does not belong to the component.\n     * @throws When the callback does not exist.\n     */\n    removeCollisionCallback(callbackId: number): void {\n        const physics = this._engine.physics;\n        const r = this._engine.wasm._wl_physx_component_removeCallback(\n            this._id,\n            callbackId\n        );\n        /* r is the amount of object to remove from the end of the\n         * callbacks array for this object */\n        if (r) physics!._callbacks[this._id].splice(-r);\n    }\n}\n\n/**\n * Access to the physics scene\n */\nexport class Physics {\n    /**\n     * @hidden\n     *\n     * **Note**: This is public to emulate a `friend` accessor.\n     */\n    _callbacks: Record<string, CollisionCallback[]>;\n\n    /** Wonderland Engine instance */\n    protected readonly _engine: WonderlandEngine;\n\n    /** Ray Hit */\n    private _rayHit: number;\n    /** Hit. */\n    private _hit: RayHit;\n\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n        this._rayHit = engine.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this._engine, this._rayHit);\n        this._callbacks = {};\n    }\n\n    /**\n     * Cast a ray through the physics scene and find intersecting objects.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param group Collision group to filter by: only objects that are\n     *        part of given group are considered for raycast.\n     * @param maxDistance Maximum ray distance, default `100.0`.\n     *\n     * @returns The RayHit instance, belonging to this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the Physics instance and\n     *       will be reused with the next {@link Physics#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        group: number,\n        maxDistance?: number\n    ): RayHit {\n        if (typeof maxDistance === 'undefined') maxDistance = 100.0;\n        this._engine.wasm._wl_physx_ray_cast(\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            group,\n            maxDistance || 100,\n            this._rayHit\n        );\n        return this._hit;\n    }\n}\n\n/**\n * Mesh index type.\n */\nexport enum MeshIndexType {\n    /** Single byte mesh index, range 0-255 */\n    UnsignedByte = 1,\n\n    /** Two byte mesh index, range 0-65535 */\n    UnsignedShort = 2,\n\n    /** Four byte mesh index, range 0-4294967295 */\n    UnsignedInt = 4,\n}\n\n/**\n * Mesh constructor parameters object.\n *\n * Usage:\n *\n * ```js\n * const mesh = Mesh({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n */\nexport interface MeshParameters {\n    /** Number of vertices to allocate. */\n    vertexCount: number;\n    /**\n     * Deprecated, use `vertexCount` instead and set data with {@link Mesh#attribute} instead.\n     *\n     * Interleaved vertex data values. A vertex is a\n     *      set of 8 float values:\n     *          - 0-2 Position\n     *          - 3-5 Normal\n     *          - 6-8 Texture Coordinate\n     *\n     * @deprecated\n     */\n    vertexData: Float32Array;\n    /** Index data values. */\n    indexData: Readonly<NumberArray>;\n    /** Index type, `null` if not indexed. */\n    indexType: MeshIndexType;\n    /** `true` if the mesh should be skinned. Defaults to false. */\n    skinned: boolean;\n}\n\n/**\n * Wrapper around a native mesh data.\n *\n * To modify a mesh, you get access to a {@link MeshAttributeAccessor} that allows you to modify\n * the content of the buffers:\n *\n * Usage:\n *\n * ```js\n * const mesh = new Mesh(engine, {vertexCount: 3, indexData: [0, 1, 2] });\n * const positions = mesh.attribute(MeshAttribute.Position);\n * ...\n * ```\n */\nexport class Mesh {\n    /**\n     * Size of a vertex in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttributeAccessor}\n     */\n    static get VERTEX_FLOAT_SIZE(): number {\n        return 3 + 3 + 2;\n    }\n    /**\n     * Size of a vertex in bytes.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttributeAccessor}\n     */\n    static get VERTEX_SIZE(): number {\n        return this.VERTEX_FLOAT_SIZE * 4;\n    }\n\n    /**\n     * Position attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#Position}\n     */\n    static get POS(): {X: number; Y: number; Z: number} {\n        return {X: 0, Y: 1, Z: 2};\n    }\n    /**\n     * Texture coordinate attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#TextureCoordinate}\n     */\n    static get TEXCOORD(): {U: number; V: number} {\n        return {U: 3, V: 4};\n    }\n    /**\n     * Normal attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#Normal}\n     */\n    static get NORMAL(): {X: number; Y: number; Z: number} {\n        return {X: 5, Y: 6, Z: 7};\n    }\n\n    /**\n     * Index of the mesh in the manager.\n     *\n     * @hidden\n     */\n    _index: number;\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Create a new instance.\n     *\n     * @param params Either a mesh index to wrap or set of parameters to create a new mesh.\n     *    For more information, please have a look at the {@link MeshParameters} interface.\n     */\n    constructor(engine: WonderlandEngine, params: Partial<MeshParameters> | number) {\n        this._engine = engine ?? WL;\n        if (typeof params === 'object') {\n            if (!params.vertexCount && params.vertexData) {\n                params.vertexCount = params.vertexData.length / Mesh.VERTEX_FLOAT_SIZE;\n            }\n            if (!params.vertexCount) throw new Error(\"Missing parameter 'vertexCount'\");\n\n            const wasm = this._engine.wasm;\n\n            let indexData = 0;\n            let indexType = 0;\n            let indexDataSize = 0;\n            if (params.indexData) {\n                indexType = params.indexType || MeshIndexType.UnsignedShort;\n                indexDataSize = params.indexData.length * indexType;\n                indexData = wasm._malloc(indexDataSize);\n                /* Copy the index data into wasm memory */\n                switch (indexType) {\n                    case MeshIndexType.UnsignedByte:\n                        wasm.HEAPU8.set(params.indexData, indexData);\n                        break;\n                    case MeshIndexType.UnsignedShort:\n                        wasm.HEAPU16.set(params.indexData, indexData >> 1);\n                        break;\n                    case MeshIndexType.UnsignedInt:\n                        wasm.HEAPU32.set(params.indexData, indexData >> 2);\n                        break;\n                }\n            }\n\n            const {skinned = false} = params;\n\n            this._index = wasm._wl_mesh_create(\n                indexData,\n                indexDataSize,\n                indexType,\n                params.vertexCount,\n                skinned\n            );\n\n            if (params.vertexData) {\n                const positions = this.attribute(MeshAttribute.Position);\n                const normals = this.attribute(MeshAttribute.Normal);\n                const textureCoordinates = this.attribute(MeshAttribute.TextureCoordinate);\n\n                for (let i = 0; i < params.vertexCount; ++i) {\n                    const start = i * Mesh.VERTEX_FLOAT_SIZE;\n                    positions!.set(i, params.vertexData.subarray(start, start + 3));\n                    textureCoordinates?.set(\n                        i,\n                        params.vertexData.subarray(start + 3, start + 5)\n                    );\n                    normals?.set(i, params.vertexData.subarray(start + 5, start + 8));\n                }\n            }\n        } else {\n            this._index = params;\n        }\n    }\n\n    /**\n     * Vertex data (read-only).\n     *\n     * @deprecated Replaced with {@link attribute}\n     */\n    get vertexData(): Float32Array {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_mesh_get_vertexData(this._index, this._engine.wasm._tempMem);\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            ptr,\n            Mesh.VERTEX_FLOAT_SIZE * wasm.HEAPU32[this._engine.wasm._tempMem / 4]\n        );\n    }\n\n    /** Number of vertices in this mesh. */\n    get vertexCount(): number {\n        return this._engine.wasm._wl_mesh_get_vertexCount(this._index);\n    }\n\n    /** Index data (read-only) or `null` if the mesh is not indexed. */\n    get indexData(): Uint8Array | Uint16Array | Uint32Array | null {\n        const wasm = this._engine.wasm;\n        const tempMem = wasm._tempMem;\n        const ptr = wasm._wl_mesh_get_indexData(this._index, tempMem, tempMem + 4);\n        if (ptr === null) return null;\n\n        const indexCount = wasm.HEAPU32[tempMem / 4];\n        const indexSize = wasm.HEAPU32[tempMem / 4 + 1];\n        switch (indexSize) {\n            case MeshIndexType.UnsignedByte:\n                return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedShort:\n                return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedInt:\n                return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);\n        }\n        return null;\n    }\n\n    /**\n     * Apply changes to {@link attribute | vertex attributes}.\n     *\n     * Uploads the updated vertex attributes to the GPU and updates the bounding\n     * sphere to match the new vertex positions.\n     *\n     * Since this is an expensive operation, call it only once you have performed\n     * all modifications on a mesh and avoid calling if you did not perform any\n     * modifications at all.\n     */\n    update() {\n        this._engine.wasm._wl_mesh_update(this._index);\n    }\n\n    /** @overload */\n    getBoundingSphere(): Float32Array;\n    /** @overload */\n    getBoundingSphere<T extends NumberArray>(out: T): T;\n    /**\n     * Mesh bounding sphere.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new {@link Float32Array}.\n     *\n     * ```js\n     *  const sphere = new Float32Array(4);\n     *  for(...) {\n     *      mesh.getBoundingSphere(sphere);\n     *      ...\n     *  }\n     * ```\n     *\n     * If the position data is changed, call {@link Mesh#update} to update the\n     * bounding sphere.\n     *\n     * @returns Bounding sphere, 0-2 sphere origin, 3 radius.\n     */\n    getBoundingSphere<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        const tempMemFloat = this._engine.wasm._tempMemFloat;\n        this._engine.wasm._wl_mesh_get_boundingSphere(\n            this._index,\n            this._engine.wasm._tempMem\n        );\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        out[3] = tempMemFloat[3];\n        return out as T;\n    }\n\n    /**\n     * Get an attribute accessor to retrieve or modify data of give attribute.\n     *\n     * @param attr Attribute to get access to\n     * @returns Attribute to get access to or `null`, if mesh does not have this attribute.\n     *\n     * Call {@link update} for changes to vertex attributes to take effect.\n     *\n     * If there are no shaders in the scene that use `TextureCoordinate` for example,\n     * no meshes will have the `TextureCoordinate` attribute.\n     *\n     * For flexible reusable components, take this into account that only `Position`\n     * is guaranteed to be present at all time.\n     */\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null {\n        if (typeof attr != 'number')\n            throw new TypeError('Expected number, but got ' + typeof attr);\n\n        const tempMemUint32 = this._engine.wasm._tempMemUint32;\n        this._engine.wasm._wl_mesh_get_attribute(\n            this._index,\n            attr,\n            this._engine.wasm._tempMem\n        );\n        if (tempMemUint32[0] == 255) return null;\n\n        const a = new MeshAttributeAccessor(this._engine, attr);\n        a._attribute = tempMemUint32[0];\n        a._offset = tempMemUint32[1];\n        a._stride = tempMemUint32[2];\n        a._formatSize = tempMemUint32[3];\n        a._componentCount = tempMemUint32[4];\n        const arraySize = tempMemUint32[5];\n        /* The WASM api returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */\n        a._arraySize = arraySize ? arraySize : 1;\n        (a.length as number) = this.vertexCount;\n        return a;\n    }\n\n    /**\n     * Destroy and free the meshes memory.\n     *\n     * It is best practice to set the mesh variable to `null` after calling\n     * destroy to prevent accidental use:\n     *\n     * ```js\n     *   mesh.destroy();\n     *   mesh = null;\n     * ```\n     *\n     * Accessing the mesh after destruction behaves like accessing an empty\n     * mesh.\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        this._engine.wasm._wl_mesh_destroy(this._index);\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native mesh ids are\n     * equal.\n     *\n     * @param otherMesh Mesh to check equality with.\n     * @returns Whether this mesh equals the given mesh.\n     *\n     * @since 1.0.0\n     */\n    equals(otherMesh: Mesh | undefined | null): boolean {\n        if (!otherMesh) return false;\n        return this._index === otherMesh._index;\n    }\n}\n\n/**\n * An iterator over a mesh vertex attribute.\n *\n * Usage:\n *\n * ```js\n *   const mesh = this.object.getComponent('mesh').mesh;\n *   const positions = mesh.attribute(WL.MeshAttribute.Position);\n *\n *   const temp = new Float32Array(3);\n *   for(int i = 0; i < positions.length; ++i) {\n *       // pos will reference temp and thereby not allocate additional\n *       // JavaScript garbage, which would cause a perf spike when collected.\n *       const pos = positions.get(i, temp);\n *       // scale position by 2 on X axis only\n *       pos[0] *= 2.0f;\n *       positions.set(i, pos);\n *   }\n *   // we're done modifying, tell the engine to move vertex data to the GPU\n *   mesh.update();\n * ```\n */\nexport class MeshAttributeAccessor {\n    /** Attribute index. @hidden */\n    _attribute: number = -1;\n    /** Attribute offset. @hidden */\n    _offset: number = 0;\n    /** Attribute stride. @hidden */\n    _stride: number = 0;\n    /** Format size native enum. @hidden */\n    _formatSize: number = 0;\n    /** Number of components per vertex. @hidden */\n    _componentCount: number = 0;\n    /** Number of values per vertex. @hidden */\n    _arraySize: number = 1;\n\n    /** Max number of elements. */\n    readonly length: number = 0;\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Class to instantiate an ArrayBuffer to get/set values.\n     */\n    private _bufferType: typeof Float32Array | typeof Uint16Array;\n    /**\n     * Function to allocate temporary WASM memory. This is cached to avoid\n     * any conditional during get/set.\n     */\n    private _tempBufferGetter: (bytes: number) => Float32Array | Uint16Array;\n\n    /**\n     * Create a new instance.\n     *\n     * @param type The type of data this accessor is wrapping.\n     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.\n     *\n     * @hidden\n     */\n    constructor(engine: WonderlandEngine, type = MeshAttribute.Position) {\n        this._engine = engine;\n        const wasm = this._engine.wasm;\n        switch (type) {\n            case MeshAttribute.Position:\n            case MeshAttribute.Normal:\n            case MeshAttribute.TextureCoordinate:\n            case MeshAttribute.Tangent:\n            case MeshAttribute.Color:\n            case MeshAttribute.JointWeight:\n                this._bufferType = Float32Array;\n                this._tempBufferGetter = wasm.getTempBufferF32.bind(wasm);\n                break;\n            case MeshAttribute.JointId:\n                this._bufferType = Uint16Array;\n                this._tempBufferGetter = wasm.getTempBufferU16.bind(wasm);\n                break;\n            case MeshAttribute.SecondaryJointWeight:\n            case MeshAttribute.SecondaryJointId:\n                /* @todo: Completely remove occurrences of SecondaryJointId for 1.0 */\n                console.error(`Deprecated attribute accessor type: ${type}`);\n            default:\n                throw new Error(`Invalid attribute accessor type: ${type}`);\n        }\n    }\n\n    /**\n     * Create a new TypedArray to hold this attribute values.\n     *\n     * This method is useful to create a view to hold the data to\n     * pass to {@link MeshAttributeAccessor.get} and {@link MeshAttributeAccessor.set}\n     *\n     * Example:\n     *\n     * ```js\n     * const vertexCount = 4;\n     * const positionAttribute = mesh.attribute(MeshAttributes.Position);\n     *\n     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.\n     * const positions = positionAttribute.createArray(vertexCount);\n     * ```\n     *\n     * @param count The number of **vertices** expected.\n     * @returns A TypedArray with the appropriate format to access the data\n     */\n    createArray(count = 1): Float32Array | Uint16Array {\n        count = count > this.length ? this.length : count;\n        return new this._bufferType(count * this._componentCount * this._arraySize);\n    }\n\n    /** @overload */\n    get(index: number): Float32Array | Uint16Array;\n    /**\n     * Get attribute element.\n     *\n     * @param index Index\n     * @param out Preallocated array to write into,\n     *      to avoid garbage, otherwise will allocate a new TypedArray.\n     *\n     * `out.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `out.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns The `out` parameter\n     */\n    get<T extends NumberArray>(\n        index: number,\n        out: T | Float32Array | Uint16Array = this.createArray()\n    ) {\n        if (out.length % this._componentCount !== 0)\n            throw new Error(\n                `out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n\n        const dest = this._tempBufferGetter(out.length);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const destSize = elementSize * out.length;\n        const srcFormatSize = this._formatSize * this._arraySize;\n        const destFormatSize = this._componentCount * elementSize * this._arraySize;\n\n        this._engine.wasm._wl_mesh_get_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            this._offset + index * this._stride,\n            this._stride,\n            destFormatSize,\n            dest.byteOffset,\n            destSize\n        );\n\n        for (let i = 0; i < out.length; ++i) out[i] = dest[i];\n        return out;\n    }\n\n    /**\n     * Set attribute element.\n     *\n     * @param i Index\n     * @param v Value to set the element to\n     *\n     * `v.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    set(i: number, v: Readonly<NumberArray>) {\n        if (v.length % this._componentCount !== 0)\n            throw new Error(\n                `out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const srcSize = elementSize * v.length;\n        const srcFormatSize = this._componentCount * elementSize * this._arraySize;\n        const destFormatSize = this._formatSize * this._arraySize;\n\n        const wasm = this._engine.wasm;\n\n        /* Unless we are already working with data from WASM heap, we\n         * need to copy into temporary memory. */\n        if ((v as Float32Array).buffer != wasm.HEAPU8.buffer) {\n            const dest = this._tempBufferGetter(v.length);\n            dest.set(v);\n            v = dest;\n        }\n\n        wasm._wl_mesh_set_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            (v as Float32Array).byteOffset,\n            srcSize,\n            destFormatSize,\n            this._offset + i * this._stride,\n            this._stride\n        );\n\n        return this;\n    }\n}\n\n/**\n * Constructor parameters object for a {@link Material} instance.\n */\nexport interface MaterialParameters {\n    /** The name of the pipeline. */\n    pipeline: string;\n}\n\n/**\n * Wrapper around a native material.\n *\n * Each material instance will have properties associated to the pipeline it uses.\n * The material properties are automatically added to each material instance, example:\n *\n * ```js\n * const material = mesh.material; // Material with a `Phong Opaque Textured` pipeline\n * // You can access all the material properties from the editor using:\n * material.diffuseTexture = null;\n * material.diffuseColor = [1.0, 0.0, 0.0, 1.0];\n * ```\n */\nexport class Material {\n    /**\n     * Index of this material in the manager.\n     *\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Material definition index in the scene.\n     *\n     * @hidden\n     */\n    private _definition: number;\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Create a new Material.\n     *\n     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.\n     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.\n     */\n    constructor(engine: WonderlandEngine, params: number | MaterialParameters) {\n        this._engine = engine;\n\n        if (typeof params !== 'number') {\n            if (!params?.pipeline) throw new Error(\"Missing parameter 'pipeline'\");\n            const wasm = this._engine.wasm;\n            const pipeline = params.pipeline;\n            const lengthBytes = wasm.lengthBytesUTF8(pipeline) + 1;\n            wasm.stringToUTF8(pipeline, wasm._tempMem, lengthBytes);\n            this._index = wasm._wl_material_create(wasm._tempMem);\n            if (this._index < 0) throw new Error(`No such pipeline '${pipeline}'`);\n        } else {\n            this._index = params;\n        }\n\n        this._definition = this._engine.wasm._wl_material_get_definition(this._index);\n        if (!this._engine.wasm._materialDefinitions[this._definition])\n            throw new Error(\n                `Material Definition ${this._definition} not found for material with index ${this._index}`\n            );\n\n        return new Proxy(this, {\n            get(target, prop) {\n                const wasm = engine.wasm;\n                const definition = wasm._materialDefinitions[target._definition];\n                const param = definition.get(prop);\n                if (!param) return (target as {[key: string | symbol]: any})[prop];\n                if (\n                    wasm._wl_material_get_param_value(\n                        target._index,\n                        param.index,\n                        wasm._tempMem\n                    )\n                ) {\n                    const type = param.type;\n                    switch (type.type) {\n                        case MaterialParamType.UnsignedInt:\n                            return type.componentCount == 1\n                                ? wasm._tempMemUint32[0]\n                                : new Uint32Array(\n                                      wasm.HEAPU32.buffer,\n                                      wasm._tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Int:\n                            return type.componentCount == 1\n                                ? wasm._tempMemInt[0]\n                                : new Int32Array(\n                                      wasm.HEAP32.buffer,\n                                      wasm._tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Float:\n                            return type.componentCount == 1\n                                ? wasm._tempMemFloat[0]\n                                : new Float32Array(\n                                      wasm.HEAPF32.buffer,\n                                      wasm._tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Sampler:\n                            return new Texture(engine, wasm._tempMemInt[0]);\n                        default:\n                            throw new Error(\n                                `Invalid type ${type} on parameter ${param.index} for material ${target._index}`\n                            );\n                    }\n                }\n            },\n\n            set(target, prop, value) {\n                const wasm = engine.wasm;\n                const definition = wasm._materialDefinitions[target._definition];\n                const param = definition.get(prop);\n                if (!param) {\n                    (target as {[key: string | symbol]: any})[prop] = value;\n                    return true;\n                }\n                const type = param.type;\n                switch (type.type) {\n                    case MaterialParamType.UnsignedInt:\n                    case MaterialParamType.Int:\n                    case MaterialParamType.Sampler:\n                        const v = value.id ?? value;\n                        wasm._wl_material_set_param_value_uint(\n                            target._index,\n                            param.index,\n                            v\n                        );\n                        break;\n                    case MaterialParamType.Float:\n                        let count = 1;\n                        if (typeof value === 'number') {\n                            wasm._tempMemFloat[0] = value;\n                        } else {\n                            count = value.length;\n                            for (let i = 0; i < count; ++i)\n                                wasm._tempMemFloat[i] = value[i];\n                        }\n                        wasm._wl_material_set_param_value_float(\n                            target._index,\n                            param.index,\n                            wasm._tempMem,\n                            count\n                        );\n                        break;\n                    case MaterialParamType.Font:\n                        throw new Error(\n                            'Setting font properties is currently unsupported.'\n                        );\n                }\n                return true;\n            },\n        });\n    }\n\n    /** Name of the shader used by this material. */\n    get shader(): string {\n        const wasm = this._engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_material_get_shader(this._index));\n    }\n\n    /**\n     * Create a copy of the underlying native material.\n     *\n     * @returns Material clone.\n     */\n    clone(): Material | null {\n        const id = this._engine.wasm._wl_material_clone(this._index);\n        return id > 0 ? new Material(this._engine, id) : null;\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native material ids are\n     * equal.\n     *\n     * @param otherMaterial Material to check equality with.\n     * @returns Whether this material equals the given material.\n     *\n     * @since 1.0.0\n     */\n    equals(otherMaterial: Material | undefined | null): boolean {\n        if (!otherMaterial) return false;\n        return this._index === otherMaterial._index;\n    }\n\n    /**\n     * Wrap a native material index.\n     *\n     * @param engine Engine instance.\n     * @param index The index.\n     * @returns Material instance or `null` if index <= 0.\n     *\n     * @deprecated Please use `new Material()` instead.\n     */\n    static wrap(engine: WonderlandEngine, index: number): Material | null {\n        /** @todo: this propagate nullable in the entire codebase. Remove. */\n        return index > 0 ? new Material(engine, index) : null;\n    }\n}\n\n/** Temporary canvas */\nlet tempCanvas: HTMLCanvasElement | null = null;\n\n/**\n * Wrapper around a native texture data.\n */\nexport class Texture {\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /** Index in the manager. @hidden */\n    private _id: number = 0;\n    /** HTML image index. @hidden */\n    private _imageIndex: number = undefined!; /* @todo: Remove undefined */\n\n    /**\n     * @param engine The engine instance\n     * @param param HTML media element to create texture from or texture id to wrap.\n     */\n    constructor(\n        engine: WonderlandEngine,\n        param: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | number\n    ) {\n        this._engine = engine ?? WL;\n        const wasm = engine.wasm;\n        if (\n            param instanceof HTMLImageElement ||\n            param instanceof HTMLVideoElement ||\n            param instanceof HTMLCanvasElement\n        ) {\n            const index = wasm._images.length;\n            wasm._images.push(param);\n            this._imageIndex = index;\n            this._id = this._engine.wasm._wl_renderer_addImage(index);\n        } else {\n            this._id = param;\n        }\n        this._engine.textures[this._id] = this;\n    }\n\n    /** Whether this texture is valid. */\n    get valid(): boolean {\n        return this._id >= 0;\n    }\n\n    /** Index in this manager. */\n    get id(): number {\n        return this._id;\n    }\n\n    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */\n    update() {\n        if (!this.valid) return;\n        this._engine.wasm._wl_renderer_updateImage(this._id, this._imageIndex);\n    }\n\n    /** Width of the texture. */\n    get width(): number {\n        return this._engine.wasm._wl_texture_width(this._id);\n    }\n\n    /** Height of the texture. */\n    get height(): number {\n        return this._engine.wasm._wl_texture_height(this._id);\n    }\n\n    /**\n     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).\n     *\n     * Usage:\n     *\n     * ```js\n     * // Copies rectangle of pixel starting from (10, 20)\n     * texture.updateSubImage(10, 20, 600, 400);\n     * ```\n     *\n     * @param x x offset\n     * @param y y offset\n     * @param w width\n     * @param h height\n     */\n    updateSubImage(x: number, y: number, w: number, h: number): void {\n        if (!this.valid) return;\n\n        /* Lazy initialize temp canvas */\n        if (!tempCanvas) tempCanvas = document.createElement('canvas');\n\n        const wasm = this._engine.wasm;\n        const img = wasm._images[this._imageIndex];\n        if (!img) return;\n\n        tempCanvas.width = w;\n        tempCanvas.height = h;\n        /* @todo: Would be smarted to cache context. */\n        tempCanvas.getContext('2d')?.drawImage(img, x, y, w, h, 0, 0, w, h);\n        /* @todo: Do not store temporary canvas. */\n        wasm._images[this._imageIndex] = tempCanvas;\n\n        try {\n            wasm._wl_renderer_updateImage(\n                this._id,\n                this._imageIndex,\n                x,\n                ((img as HTMLVideoElement).videoHeight || img.height) - y - h\n            );\n        } finally {\n            wasm._images[this._imageIndex] = img;\n        }\n    }\n\n    /**\n     * Destroy and free the texture's texture altas space and memory.\n     *\n     * It is best practice to set the texture variable to `null` after calling\n     * destroy to prevent accidental use of the invalid texture:\n     *\n     * ```js\n     *   texture.destroy();\n     *   texture = null;\n     * ```\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        this._engine.wasm._wl_texture_destroy(this._id);\n        if (this._imageIndex) {\n            this._engine.wasm._images[this._imageIndex] = null;\n            this._imageIndex = undefined!;\n        }\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native texture ids are\n     * equal.\n     *\n     * @param otherTexture Texture to check equality with.\n     * @returns Whether this texture equals the given texture.\n     *\n     * @since 1.0.0\n     */\n    equals(otherTexture: Texture | undefined | null): boolean {\n        if (!otherTexture) return false;\n        return this._id === otherTexture._id;\n    }\n}\n\n/**\n * Wrapper around a native animation.\n */\nexport class Animation {\n    /** Index of the mesh in the manager. @hidden */\n    _index: number;\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * @param index Index in the manager\n     */\n    constructor(engine: WonderlandEngine = WL, index: number) {\n        this._engine = engine;\n        this._index = index;\n    }\n\n    /** Duration of this animation. */\n    get duration(): number {\n        return this._engine.wasm._wl_animation_get_duration(this._index);\n    }\n\n    /** Number of tracks in this animation. */\n    get trackCount(): number {\n        return this._engine.wasm._wl_animation_get_trackCount(this._index);\n    }\n\n    /**\n     * Clone this animation retargeted to a new set of objects.\n     *\n     * The clone shares most of the data with the original and is therefore\n     * light-weight.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * If retargetting to {@link Skin}, the join names will be used to determine a mapping\n     * from the previous skin to the new skin. The source skin will be retrieved from\n     * the first track in the animation that targets a joint.\n     *\n     * @param newTargets New targets per track. Expected to have\n     *      {@link Animation#trackCount} elements or to be a {@link Skin}.\n     * @returns The retargeted clone of this animation.\n     */\n    retarget(newTargets: $Object[] | Skin): Animation {\n        const wasm = this._engine.wasm;\n        if (newTargets instanceof Skin) {\n            const animId = wasm._wl_animation_retargetToSkin(\n                this._index,\n                newTargets._index\n            );\n            return new Animation(this._engine, animId);\n        }\n\n        if (newTargets.length != this.trackCount) {\n            throw Error(\n                'Expected ' +\n                    this.trackCount.toString() +\n                    ' targets, but got ' +\n                    newTargets.length.toString()\n            );\n        }\n        const ptr = wasm._malloc(2 * newTargets.length);\n        for (let i = 0; i < newTargets.length; ++i) {\n            wasm.HEAPU16[ptr >> (1 + i)] = (newTargets[i] as $Object).objectId;\n        }\n        const animId = wasm._wl_animation_retarget(this._index, ptr);\n        wasm._free(ptr);\n\n        return new Animation(this._engine, animId);\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native animation ids\n     * are equal.\n     *\n     * @param otherAnimation Animation to check equality with.\n     * @returns Whether this animation equals the given animation.\n     *\n     * @since 1.0.0\n     */\n    equals(otherAnimation: Animation | undefined | null): boolean {\n        if (!otherAnimation) return false;\n        return this._index === otherAnimation._index;\n    }\n}\n\n/**\n * Scene graph object.\n *\n * Node in the scene graph or \"entity\". Consists of transformation and a reference\n * to its parent object. Usually holds components and is accessible by components\n * through {@link Component#object}.\n *\n * Objects are stored in a data oriented manner inside WebAssembly memory. This class\n * is a JavaScript API wrapper around this memory for more convenient use in\n * components.\n *\n * Objects can be created and added to a scene through\n * {@link Scene#addObject} on the {@link WonderlandEngine.scene}.\n */\nclass $Object {\n    /**\n     * Object index in the manager.\n     */\n    objectId: number; /* @todo: Make private */\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * @param o Object id to wrap\n     *\n     * For performance reasons, please use {@link WonderlandEngine.wrapObject}\n     */\n    constructor(engine: WonderlandEngine, o: number) {\n        this.objectId = o;\n        this._engine = engine;\n    }\n\n    /**\n     * Name of the object.\n     *\n     * Useful for identifying objects during debugging.\n     */\n    get name(): string {\n        const wasm = this._engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_object_name(this.objectId));\n    }\n\n    /**\n     * Set the object's name.\n     *\n     * @param newName The new name to set.\n     */\n    set name(newName: string) {\n        const wasm = this._engine.wasm;\n        const lengthBytes = wasm.lengthBytesUTF8(newName) + 1;\n        const mem = wasm._tempMem;\n        wasm.stringToUTF8(newName, mem, lengthBytes);\n        wasm._wl_object_set_name(this.objectId, mem);\n    }\n\n    /**\n     * Parent of this object or `null` if parented to root.\n     */\n    get parent(): $Object | null {\n        const p = this._engine.wasm._wl_object_parent(this.objectId);\n        return p === 0 ? null : this._engine.wrapObject(p);\n    }\n\n    /**\n     * Children of this object.\n     */\n    get children(): $Object[] {\n        const childrenCount = this._engine.wasm._wl_object_get_children_count(\n            this.objectId\n        );\n        if (childrenCount === 0) return [];\n\n        const wasm = this._engine.wasm;\n        wasm.requireTempMem(childrenCount * 2);\n\n        this._engine.wasm._wl_object_get_children(\n            this.objectId,\n            wasm._tempMem,\n            wasm._tempMemSize >> 1\n        );\n\n        const children = new Array(childrenCount);\n        for (let i = 0; i < childrenCount; ++i) {\n            children[i] = this._engine.wrapObject(wasm._tempMemUint16[i]);\n        }\n        return children;\n    }\n\n    /**\n     * Reparent object to given object.\n     *\n     * @note Reparenting is not trivial and might have a noticeable performance impact.\n     *\n     * @param newParent New parent or `null` to parent to root\n     */\n    set parent(newParent: $Object | undefined | null) {\n        this._engine.wasm._wl_object_set_parent(\n            this.objectId,\n            newParent == null ? 0 : newParent.objectId\n        );\n    }\n\n    /** Reset local transformation (translation, rotation and scaling) to identity. */\n    resetTransform(): void {\n        this._engine.wasm._wl_object_reset_translation_rotation(this.objectId);\n        this._engine.wasm._wl_object_reset_scaling(this.objectId);\n    }\n\n    /** Reset local translation and rotation to identity */\n    resetTranslationRotation(): void {\n        this._engine.wasm._wl_object_reset_translation_rotation(this.objectId);\n    }\n\n    /**\n     * Reset local rotation, keep translation.\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     */\n    resetRotation(): void {\n        this._engine.wasm._wl_object_reset_rotation(this.objectId);\n    }\n\n    /**\n     * Reset local translation, keep rotation.\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     */\n    resetTranslation(): void {\n        this._engine.wasm._wl_object_reset_translation(this.objectId);\n    }\n\n    /** Reset local scaling to identity (``[1.0, 1.0, 1.0]``). */\n    resetScaling(): void {\n        this._engine.wasm._wl_object_reset_scaling(this.objectId);\n    }\n\n    /**\n     * Translate object by a vector in the parent's space.\n     * @param v Vector to translate by.\n     */\n    translate(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_translate(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Translate object by a vector in object space.\n     * @param v Vector to translate by.\n     */\n    translateObject(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_translate_obj(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Translate object by a vector in world space.\n     * @param v Vector to translate by.\n     */\n    translateWorld(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_translate_world(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleRad}\n     */\n    rotateAxisAngleDeg(a: Readonly<NumberArray>, d: number): void {\n        this._engine.wasm._wl_object_rotate_axis_angle(this.objectId, a[0], a[1], a[2], d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in radians.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleDeg}\n     */\n    rotateAxisAngleRad(a: Readonly<NumberArray>, d: number): void {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad(\n            this.objectId,\n            a[0],\n            a[1],\n            a[2],\n            d\n        );\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in object space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @see {@link rotateAxisAngleRadObject}\n     */\n    rotateAxisAngleDegObject(a: Readonly<NumberArray>, d: number): void {\n        this._engine.wasm._wl_object_rotate_axis_angle_obj(\n            this.objectId,\n            a[0],\n            a[1],\n            a[2],\n            d\n        );\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in object space\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param a Vector representing the rotation axis\n     * @param d Angle in degrees\n     *\n     * @see {@link rotateAxisAngleDegObject}\n     */\n    rotateAxisAngleRadObject(a: Readonly<NumberArray>, d: number): void {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad_obj(\n            this.objectId,\n            a[0],\n            a[1],\n            a[2],\n            d\n        );\n    }\n\n    /**\n     * Rotate by a quaternion.\n     *\n     * @param q the Quaternion to rotate by.\n     */\n    rotate(q: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_rotate_quat(this.objectId, q[0], q[1], q[2], q[3]);\n    }\n\n    /**\n     * Rotate by a quaternion in object space.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param q the Quaternion to rotate by.\n     */\n    rotateObject(q: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_rotate_quat_obj(this.objectId, q[0], q[1], q[2], q[3]);\n    }\n\n    /**\n     * Scale object by a vector in object space.\n     *\n     * @param v Vector to scale by.\n     */\n    scale(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_scale(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /** Local / object space transformation. */\n    get transformLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_local(this.objectId),\n            8\n        );\n    }\n\n    /**\n     * Set local transform.\n     *\n     * @param t Local space transformation.\n     *\n     * @since 0.8.5\n     */\n    set transformLocal(t: Readonly<NumberArray>) {\n        this.transformLocal.set(t);\n        this.setDirty();\n    }\n\n    /**\n     * Compute local / object space translation from transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getTranslationLocal<T extends NumberArray>(out: T): T {\n        const wasm = this._engine.wasm;\n        wasm._wl_object_get_translation_local(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Compute world space translation from transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getTranslationWorld<T extends NumberArray>(out: T): T {\n        const wasm = this._engine.wasm;\n        wasm._wl_object_get_translation_world(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Set local / object space translation.\n     *\n     * Concatenates a new translation dual quaternion onto the existing rotation.\n     *\n     * @param v New local translation array/vector, expected to have at least 3 elements.\n     */\n    setTranslationLocal(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_set_translation_local(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Set world space translation.\n     *\n     * Applies the inverse parent transform with a new translation dual quaternion\n     * which is concatenated onto the existing rotation.\n     *\n     * @param v New world translation array/vector, expected to have at least 3 elements.\n     */\n    setTranslationWorld(v: Readonly<NumberArray>): void {\n        this._engine.wasm._wl_object_set_translation_world(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Global / world space transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     */\n    get transformWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_trans_world(this.objectId),\n            8\n        );\n    }\n\n    /**\n     * Set world transform.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.5\n     */\n    set transformWorld(t: Readonly<NumberArray>) {\n        this.transformWorld.set(t);\n        this._engine.wasm._wl_object_trans_world_to_local(this.objectId);\n    }\n\n    /** Local / object space scaling. */\n    get scalingLocal(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_local(this.objectId),\n            3\n        );\n    }\n\n    /**\n     * Set local space scaling.\n     *\n     * @param s Global / world space transformation.\n     *\n     * @since 0.8.7\n     */\n    set scalingLocal(s: Readonly<NumberArray>) {\n        this.scalingLocal.set(s);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space scaling.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     */\n    get scalingWorld(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_object_scaling_world(this.objectId),\n            3\n        );\n    }\n\n    /**\n     * Set world space scaling.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.7\n     */\n    set scalingWorld(s: Readonly<NumberArray>) {\n        this.scalingWorld.set(s);\n        this._engine.wasm._wl_object_scaling_world_to_local(this.objectId);\n    }\n\n    /**\n     * Local space rotation.\n     *\n     * @since 0.8.7\n     */\n    get rotationLocal(): Float32Array {\n        return this.transformLocal.subarray(0, 4);\n    }\n\n    /**\n     * Global / world space rotation\n     *\n     * @since 0.8.7\n     */\n    get rotationWorld(): Float32Array {\n        return this.transformWorld.subarray(0, 4);\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param r Local space rotation\n     *\n     * @since 0.8.7\n     */\n    set rotationLocal(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_local(\n            this.objectId,\n            r[0],\n            r[1],\n            r[2],\n            r[3]\n        );\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param r Global / world space rotation.\n     *\n     * @since 0.8.7\n     */\n    set rotationWorld(r: Readonly<NumberArray>) {\n        this._engine.wasm._wl_object_set_rotation_world(\n            this.objectId,\n            r[0],\n            r[1],\n            r[2],\n            r[3]\n        );\n    }\n\n    /**\n     * Compute the object's forward facing world space vector.\n     *\n     * The forward vector in object space is along the negative z-axis, i.e.,\n     * `[0, 0, -1]`.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getForward<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = -1;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Compute the object's up facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getUp<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 1;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Compute the object's right facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getRight<T extends NumberArray>(out: T): T {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's world transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorWorld<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorWorld(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorLocal<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorLocal(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointWorld<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointWorld(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointLocal<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointLocal(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse world transform.\n     *\n     * @param out Out vector.\n     * @param v Vector to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseWorld<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseWorld(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseLocal<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseLocal(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseWorld<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointInverseWorld(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseLocal<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(p);\n        wasm._wl_object_transformPointInverseLocal(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform an object space dual quaternion into world space.\n     *\n     * @param out Out transformation.\n     * @param q Local space transformation, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toWorldSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        q = q || out;\n\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toWorldSpaceTransform(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into local space.\n     *\n     * @param out Out transformation\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toLocalSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        const p = this.parent;\n        q = q || out;\n        if (!p) {\n            if (out !== q) {\n                out[0] = q[0];\n                out[1] = q[1];\n                out[2] = q[2];\n                out[3] = q[3];\n                out[4] = q[4];\n                out[5] = q[5];\n                out[6] = q[6];\n                out[7] = q[7];\n            }\n        } else {\n            /* @todo: This is broken. It should use `out`. */\n            p.toObjectSpaceTransform(q as number[]);\n        }\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into object space.\n     *\n     * @param out Out transformation.\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toObjectSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        q = q || out;\n\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toObjectSpaceTransform(this.objectId, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Turn towards / look at target.\n     *\n     * Rotates the object so that its forward vector faces towards the target\n     * position. The `up` vector acts as a hint to uniquely orient the object's\n     * up direction. When orienting a view component, the projected `up` vector\n     * faces upwards on the viewing plane.\n     *\n     * @param p Target position to turn towards, in world space.\n     * @param up Up vector to align object with, in world space. Default is `[0, 1, 0]`.\n     */\n    lookAt(p: NumberArray, up: NumberArray = UP_VECTOR): void {\n        this._engine.wasm._wl_object_lookAt(\n            this.objectId,\n            p[0],\n            p[1],\n            p[2],\n            up[0],\n            up[1],\n            up[2]\n        );\n    }\n\n    /** Destroy the object with all of its components and remove it from the scene */\n    destroy(): void {\n        this._engine.wasm._wl_scene_remove_object(this.objectId);\n        /* @todo: Shouldn't be `null` otherwise the API is unexpected */\n        this.objectId = null!;\n    }\n\n    /**\n     * Mark transformation dirty.\n     *\n     * Causes an eventual recalculation of {@link transformWorld}, either\n     * on next {@link getTranslationWorld}, {@link transformWorld} or\n     * {@link scalingWorld} or the beginning of next frame, whichever\n     * happens first.\n     */\n    setDirty(): void {\n        this._engine.wasm._wl_object_set_dirty(this.objectId);\n    }\n\n    /**\n     * Disable/enable all components of this object.\n     *\n     * @param b New state for the components.\n     *\n     * @since 0.8.5\n     */\n    set active(b: boolean) {\n        const comps = this.getComponents();\n        for (let c of comps) {\n            c.active = b;\n        }\n    }\n\n    /* `getComponent` overloads for native components. */\n\n    /** @overload */\n    getComponent(type: 'collision', index?: number): CollisionComponent | null;\n    /** @overload */\n    getComponent(type: 'text', index?: number): TextComponent | null;\n    /** @overload */\n    getComponent(type: 'view', index?: number): ViewComponent | null;\n    /** @overload */\n    getComponent(type: 'mesh', index?: number): MeshComponent | null;\n    /** @overload */\n    getComponent(type: 'input', index?: number): InputComponent | null;\n    /** @overload */\n    getComponent(type: 'light', index?: number): LightComponent | null;\n    /** @overload */\n    getComponent(type: 'animation', index?: number): AnimationComponent | null;\n    /** @overload */\n    getComponent(type: 'physx', index?: number): PhysXComponent | null;\n    /** @overload */\n    getComponent(typeOrClass: string, index?: number): Component | null;\n    /** @overload */\n    getComponent<T extends Component>(\n        typeOrClass: ComponentConstructor<T>,\n        index?: number\n    ): T | null;\n\n    /**\n     * Get a component attached to this object.\n     *\n     * @param typeOrClass Type name. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field to find the component.\n     * @param index=0 Index for component of given type. This can be used to access specific\n     *      components if the object has multiple components of the same type.\n     * @returns The component or `null` if there is no such component on this object\n     */\n    getComponent(\n        typeOrClass: string | ComponentConstructor,\n        index?: number\n    ): Component | null {\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const wasm = this._engine.wasm;\n        const lengthBytes = wasm.lengthBytesUTF8(type) + 1;\n        const mem = wasm._tempMem;\n        wasm.stringToUTF8(type, mem, lengthBytes);\n        const componentType = this._engine.wasm._wl_get_component_manager_index(mem);\n\n        if (componentType < 0) {\n            /* Not a native component, try js: */\n            const typeIndex = this._engine.wasm._componentTypeIndices[type];\n            const jsIndex = this._engine.wasm._wl_get_js_component_index(\n                this.objectId,\n                typeIndex,\n                index || 0\n            );\n            return jsIndex < 0 ? null : this._engine.wasm._components[jsIndex];\n        }\n\n        const componentId = this._engine.wasm._wl_get_component_id(\n            this.objectId,\n            componentType,\n            index || 0\n        );\n        return this._engine._wrapComponent(type, componentType, componentId);\n    }\n\n    /**\n     * @param typeOrClass Type name, pass a falsey value (`undefined` or `null`) to retrieve all.\n     *     It's also possible to give a class definition. In this case, the method will use the `class.TypeName` field to\n     *     find the components.\n     * @returns All components of given type attached to this object.\n     *\n     * @note As this function is non-trivial, avoid using it in `update()` repeatedly,\n     *      but rather store its result in `init()` or `start()`\n     * @warning This method will currently return at most 341 components.\n     */\n    getComponents<T extends Component>(\n        typeOrClass?: string | ComponentConstructor<T> | null\n    ): T[] {\n        const wasm = this._engine.wasm;\n\n        let componentType = null;\n        let type = null;\n        if (typeOrClass) {\n            type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n            componentType = wasm._typeIndexFor(type);\n        }\n\n        const components: Component[] = [];\n        const maxComps = Math.floor((wasm._tempMemSize / 3) * 2);\n        const componentsCount = wasm._wl_object_get_components(\n            this.objectId,\n            wasm._tempMem,\n            maxComps\n        );\n        const offset = 2 * componentsCount;\n        wasm._wl_object_get_component_types(\n            this.objectId,\n            wasm._tempMem + offset,\n            maxComps\n        );\n\n        const jsManagerIndex = wasm._typeIndexFor('js');\n        for (let i = 0; i < componentsCount; ++i) {\n            const t = wasm._tempMemUint8[i + offset];\n            const componentId = wasm._tempMemUint16[i];\n            /* Handle JS types separately */\n            if (t == jsManagerIndex) {\n                const typeIndex = wasm._wl_get_js_component_index_for_id(componentId);\n                const comp = wasm._components[typeIndex];\n                if (componentType === null || comp.type == type) components.push(comp);\n                continue;\n            }\n\n            if (componentType === null) {\n                const managerName = wasm._typeNameFor(t);\n                components.push(this._engine._wrapComponent(managerName, t, componentId)!);\n            } else if (t == componentType) {\n                /* Optimized manager name retrieval, already have type */\n                components.push(\n                    this._engine._wrapComponent(type as string, componentType, componentId)!\n                );\n            }\n        }\n        return components as T[];\n    }\n\n    /* `addComponent` overloads for native components. */\n\n    /** @overload */\n    addComponent(\n        type: 'collision',\n        params?: Record<string, any>\n    ): CollisionComponent | null;\n    /** @overload */\n    addComponent(type: 'text', params?: Record<string, any>): TextComponent | null;\n    /** @overload */\n    addComponent(type: 'view', params?: Record<string, any>): ViewComponent | null;\n    /** @overload */\n    addComponent(type: 'mesh', params?: Record<string, any>): MeshComponent | null;\n    /** @overload */\n    addComponent(type: 'input', params?: Record<string, any>): InputComponent | null;\n    /** @overload */\n    addComponent(type: 'light', params?: Record<string, any>): LightComponent | null;\n    /** @overload */\n    addComponent(\n        type: 'animation',\n        params?: Record<string, any>\n    ): AnimationComponent | null;\n    /** @overload */\n    addComponent(type: 'physx', params?: Record<string, any>): PhysXComponent | null;\n    /** @overload */\n    addComponent<T extends Component>(\n        typeClass: ComponentConstructor<T>,\n        params?: Record<string, any>\n    ): T | null;\n    /**\n     * Add component of given type to the object.\n     *\n     * You can use this function to clone components, see the example below.\n     *\n     * ```js\n     *  // Clone existing component (since 0.8.10)\n     *  let original = this.object.getComponent('mesh');\n     *  otherObject.addComponent('mesh', original);\n     *  // Create component from parameters\n     *  this.object.addComponent('mesh', {\n     *      mesh: someMesh,\n     *      material: someMaterial,\n     *  });\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @param params Parameters to initialize properties of the new component,\n     *      can be another component to copy properties from.\n     *\n     * @returns The component or `null` if the type was not found\n     */\n    addComponent(\n        typeOrClass: ComponentConstructor | string,\n        params?: Record<string, any>\n    ): Component | null {\n        const wasm = this._engine.wasm;\n\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const componentType = wasm._typeIndexFor(type);\n        let component: Component = null!;\n        let componentIndex = null;\n        if (componentType < 0) {\n            /* JavaScript component */\n            if (!(type in wasm._componentTypeIndices)) {\n                throw new TypeError(\"Unknown component type '\" + type + \"'\");\n            }\n            const componentId = wasm._wl_object_add_js_component(\n                this.objectId,\n                wasm._componentTypeIndices[type]\n            );\n            componentIndex = wasm._wl_get_js_component_index_for_id(componentId);\n            component = wasm._components[componentIndex];\n        } else {\n            /* native component */\n            const componentId = wasm._wl_object_add_component(this.objectId, componentType);\n            component = this._engine._wrapComponent(type, componentType, componentId)!;\n        }\n\n        if (params !== undefined) {\n            const ctor = component.constructor as ComponentConstructor;\n            for (const key in params) {\n                if (!(key in ctor.Properties)) continue;\n                (component as Record<string, any>)[key] = params[key];\n            }\n        }\n\n        /* Explicitly initialize native components */\n        if (componentType < 0) {\n            /* @todo: `componentIndex` can be null here, that's an error */\n            wasm.__wljs_component_init(componentIndex!);\n            /* start() is called through onActivate() */\n        }\n\n        /* If it was not explicitly requested by the user to leave the component inactive,\n         * we activate it as a final step. This invalidates componentIndex! */\n        if (!params || !('active' in params && !params.active)) {\n            component.active = true;\n        }\n\n        return component;\n    }\n\n    /**\n     * Whether given object's transformation has changed.\n     */\n    get changed(): boolean {\n        return !!this._engine.wasm._wl_object_is_changed(this.objectId);\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native object ids are\n     * equal.\n     *\n     * @param otherObject Object to check equality with.\n     * @returns Whether this object equals the given object.\n     */\n    equals(otherObject: $Object | undefined | null): boolean {\n        if (!otherObject) return false;\n        return this.objectId == otherObject.objectId;\n    }\n}\n\n/**\n * Wrapper around a native skin data.\n */\nexport class Skin {\n    /**\n     * Index of the skin in the manager.\n     * @hidden\n     */\n    _index: number;\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    constructor(engine: WonderlandEngine, index: number) {\n        this._engine = engine;\n        this._index = index;\n    }\n\n    /** Amount of joints in this skin. */\n    get jointCount() {\n        return this._engine.wasm._wl_skin_get_joint_count(this._index);\n    }\n\n    /** Joints object ids for this skin */\n    get jointIds(): Uint16Array {\n        const wasm = this._engine.wasm;\n        return new Uint16Array(\n            wasm.HEAPU16.buffer,\n            wasm._wl_skin_joint_ids(this._index),\n            this.jointCount\n        );\n    }\n\n    /**\n     * Dual quaternions in a flat array of size 8 times {@link jointCount}.\n     *\n     * Inverse bind transforms of the skin.\n     */\n    get inverseBindTransforms(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_transforms(this._index),\n            8 * this.jointCount\n        );\n    }\n\n    /**\n     * Vectors in a flat array of size 3 times {@link jointCount}.\n     *\n     * Inverse bind scalings of the skin.\n     */\n    get inverseBindScalings(): Float32Array {\n        const wasm = this._engine.wasm;\n        return new Float32Array(\n            wasm.HEAPF32.buffer,\n            wasm._wl_skin_inverse_bind_scalings(this._index),\n            3 * this.jointCount\n        );\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native skin ids are\n     * equal.\n     *\n     * @param otherSkin Skin to check equality with.\n     * @returns Whether this skin equals the given skin.\n     *\n     * @since 1.0.0\n     */\n    equals(otherSkin: Skin | undefined | null): boolean {\n        if (!otherSkin) return false;\n        return this._index === otherSkin._index;\n    }\n}\n\n/* Unfortunately, the name \"Object\" is reserved, so internally we\n * use $Object, while we expose WL.Object as previously. */\nexport {$Object as Object};\n\n/**\n * Ray hit.\n *\n * Result of a {@link Scene.rayCast}.\n *\n * @note this class wraps internal engine data and should only be created internally.\n */\nexport class RayHit {\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /** Pointer to the memory heap. */\n    private _ptr: number;\n\n    /**\n     * @param ptr Pointer to the ray hits memory.\n     */\n    constructor(engine: WonderlandEngine, ptr: number) {\n        if ((ptr & 3) !== 0) {\n            throw new Error(MISALIGNED_MSG);\n        }\n        this._engine = engine;\n        this._ptr = ptr;\n    }\n\n    /** Array of ray hit locations. */\n    get locations(): Float32Array[] {\n        let p = this._ptr;\n        let l = [];\n        for (let i = 0; i < this.hitCount; ++i) {\n            l.push(new Float32Array(this._engine.wasm.HEAPF32.buffer, p + 12 * i, 3));\n        }\n        return l;\n    }\n\n    /** Array of ray hit normals (only when using {@link Physics#rayCast}. */\n    get normals(): Float32Array[] {\n        let p = this._ptr + 48;\n        let l = [];\n        for (let i = 0; i < this.hitCount; ++i) {\n            l.push(new Float32Array(this._engine.wasm.HEAPF32.buffer, p + 12 * i, 3));\n        }\n        return l;\n    }\n\n    /**\n     * Prefer these to recalculating the distance from locations.\n     *\n     * Distances of array hits to ray origin.\n     */\n    get distances(): Float32Array {\n        const p = this._ptr + 48 * 2;\n        return new Float32Array(this._engine.wasm.HEAPF32.buffer, p, this.hitCount);\n    }\n\n    /** Hit objects */\n    get objects(): ($Object | null)[] {\n        let p = this._ptr + (48 * 2 + 16);\n        let objIds = new Uint16Array(this._engine.wasm.HEAPU16.buffer, p, this.hitCount);\n        return [\n            objIds[0] <= 0 ? null : this._engine.wrapObject(objIds[0]),\n            objIds[1] <= 0 ? null : this._engine.wrapObject(objIds[1]),\n            objIds[2] <= 0 ? null : this._engine.wrapObject(objIds[2]),\n            objIds[3] <= 0 ? null : this._engine.wrapObject(objIds[3]),\n        ];\n    }\n\n    /** Number of hits (max 4) */\n    get hitCount(): number {\n        return Math.min(this._engine.wasm.HEAPU32[this._ptr / 4 + 30], 4);\n    }\n}\n\nclass math {\n    /** (Experimental!) Cubic Hermite spline interpolation for vector3 and quaternions.\n     *\n     * With `f == 0`, `out` will be `b`, if `f == 1`, `out` will be c.\n     *\n     * Whether a quaternion or vector3 interpolation is intended is determined by\n     * length of `a`.\n     *\n     * @param out Array to write result to.\n     * @param a First tangent/handle.\n     * @param b First point or quaternion.\n     * @param c Second point or quaternion.\n     * @param d Second handle.\n     * @param f Interpolation factor in [0; 1].\n     * @returns The `out` parameter.\n     *\n     * @since 0.8.6\n     */\n    static cubicHermite<T extends NumberArray>(\n        out: T,\n        a: Readonly<NumberArray>,\n        b: Readonly<NumberArray>,\n        c: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        f: number,\n        engine: WonderlandEngine = WL\n    ) {\n        const wasm = engine.wasm;\n        wasm._tempMemFloat.subarray(0).set(a);\n        wasm._tempMemFloat.subarray(4).set(b);\n        wasm._tempMemFloat.subarray(8).set(c);\n        wasm._tempMemFloat.subarray(12).set(d);\n\n        const isQuat = a.length == 4;\n\n        wasm._wl_math_cubicHermite(\n            wasm._tempMem + 4 * 16,\n            wasm._tempMem + 4 * 0,\n            wasm._tempMem + 4 * 4,\n            wasm._tempMem + 4 * 8,\n            wasm._tempMem + 4 * 12,\n            f,\n            isQuat\n        );\n        out[0] = wasm._tempMemFloat[16];\n        out[1] = wasm._tempMemFloat[17];\n        out[2] = wasm._tempMemFloat[18];\n        if (isQuat) out[3] = wasm._tempMemFloat[19];\n        return out;\n    }\n}\n\n/**\n * Callback triggered when a language is loaded.\n *\n * Used in {@link I18N.onLanguageChanged}.\n */\nexport type LanguageChangedCallback = (oldLangIndex: number, newLangIndex: number) => void;\n\nexport {math};\n\n/**\n * Class for accessing internationalization (i18n) features.\n *\n * Allows {@link I18N.onLanguageChanged \"detecting language change\"},\n * {@link I18N.language \"setting the current language\"} or translating\n * {@link I18N.translate() \"individual terms\"}.\n *\n * Internationalization works with terms,\n * a string type keyword that is linked to a different text for each language.\n *\n * Internally, string parameters for text and js components are\n * automatically swapped during language change, given they are linked to a term.\n * If manual text swapping is desired, {@link I18N.translate()}\n * can be used to retrieve the current translation for any term.\n *\n * You can also use the {@link I18N.onLanguageChanged} to manually update text\n * when a language is changed to for example update a number in a string.\n *\n * @since 1.0.0\n */\nexport class I18N {\n    /**\n     * List of functions to call after a language is loaded.\n     */\n    readonly onLanguageChanged: LanguageChangedCallback[] = [];\n\n    /** Wonderland Engine instance. @hidden */\n    protected _engine: WonderlandEngine;\n\n    /**\n     * Constructor\n     */\n    constructor(engine: WonderlandEngine) {\n        this._engine = engine;\n    }\n\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @param code Language code to switch to\n     */\n    set language(code: string | null) {\n        const wasm = this._engine.wasm;\n        if (code == null) return;\n        const strLen = wasm.lengthBytesUTF8(code) + 1;\n        wasm.stringToUTF8(code, wasm._tempMem, strLen);\n        wasm._wl_i18n_setLanguage(wasm._tempMem);\n    }\n\n    /**\n     * Get current language code.\n     *\n     */\n    get language(): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_currentLanguage();\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get translated string for a term for the currently loaded language.\n     *\n     * @param term Term to translate\n     */\n    translate(term: string): string | null {\n        const wasm = this._engine.wasm;\n        const strLen = wasm.lengthBytesUTF8(term) + 1;\n        wasm.stringToUTF8(term, wasm._tempMem, strLen);\n        const translation = wasm._wl_i18n_translate(wasm._tempMem);\n        if (translation === 0) return null;\n        return wasm.UTF8ToString(translation);\n    }\n\n    /**\n     * Get the number of languages in the project.\n     *\n     */\n    languageCount(): number {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageCount();\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageIndex(code: string): number {\n        const wasm = this._engine.wasm;\n        const strLen = wasm.lengthBytesUTF8(code) + 1;\n        wasm.stringToUTF8(code, wasm._tempMem, strLen);\n        return wasm._wl_i18n_languageIndex(wasm._tempMem);\n    }\n\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageCode(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_languageCode(index);\n        if (code === 0) return null;\n        return wasm.UTF8ToString(code);\n    }\n\n    /**\n     * Get a language name.\n     *\n     * @param index Index of the language to get the name from\n     */\n    languageName(index: number): string | null {\n        const wasm = this._engine.wasm;\n        const name = wasm._wl_i18n_languageName(index);\n        if (name === 0) return null;\n        return wasm.UTF8ToString(name);\n    }\n}\n", "/**\n * Check if a given value is a native string or a `String` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type string literal or `String`, `false` otherwise.\n */\nexport function isString(value: any): value is string {\n    if (value === '') return true;\n    return value && (typeof value === 'string' || value.constructor === String);\n}\n", "import {\n    Component,\n    ComponentProto,\n    ComponentConstructor,\n    CollisionComponent,\n    AnimationComponent,\n    LightComponent,\n    MeshComponent,\n    PhysXComponent,\n    InputComponent,\n    ViewComponent,\n    TextComponent,\n    CustomParameter,\n    Texture,\n    Object as Object3D,\n    Scene,\n    Type,\n    Physics,\n    I18N,\n} from './wonderland.js';\n\nimport {isString} from './utils/object.js';\nimport {WASM} from './wasm.js';\n\n/**\n * Callback triggered when the session starts.\n *\n * Used in {@link WonderlandEngine.onXRSessionStart}.\n *\n * @param session The session that started\n */\nexport type XrSessionStartCallback = (session: XRSession, mode: XRSessionMode) => void;\n\n/**\n * Callback triggered when the scene is loaded.\n *\n * Used in {@link WonderlandEngine.onSceneLoaded}.\n */\nexport type SceneLoadedCallback = () => void;\n\n/* @todo: the `textures` literal should have a better shape/api. */\nexport type TextureCache = {\n    [key: string]: Texture | ((filename: string, crossOrigin?: string) => Promise<Texture>);\n\n    /**\n     * Load an image from URL as {@link Texture}.\n     *\n     * @param filename URL to load from.\n     * @param crossOrigin Cross origin flag for the image object.\n     * @returns Loaded texture.\n     */\n    load: (filename: string, crossOrigin?: string) => Promise<Texture>;\n};\n\n/**\n * Default component parameter value per type.\n */\nconst _componentDefaults = new Map<Type, any>([\n    [Type.Bool, false],\n    [Type.Int, 0],\n    [Type.Float, 0.0],\n    [Type.String, ''],\n    [Type.Enum, undefined],\n    [Type.Object, null],\n    [Type.Mesh, null],\n    [Type.Texture, null],\n    [Type.Material, null],\n    [Type.Animation, null],\n    [Type.Skin, null],\n    [Type.Color, [0.0, 0.0, 0.0, 1.0]],\n]);\n\n/**\n * Setup the defaults value of the properties on a given\n * component class.\n *\n * @param ctor The component class\n */\nfunction _setupDefaults(ctor: ComponentConstructor) {\n    for (const name in ctor.Properties) {\n        const p = ctor.Properties[name];\n        /* Convert enum default string to an index. We need to check if it's\n         * already been converted so we don't try to look up the index. */\n        if (p.type === Type.Enum && typeof p.default !== 'number') {\n            /* Matches the editor behavior for packaged components. Default\n             * value is a string, but is converted to an index. If there is no\n             * default string, it becomes index 0. */\n            if (p.values?.length) {\n                p.default = Math.max(p.values.indexOf(p.default), 0);\n            } else {\n                p.default = undefined;\n            }\n        } else {\n            p.default = p.default ?? _componentDefaults.get(p.type);\n        }\n        ctor.prototype[name] = p.default;\n    }\n}\n\n/**\n * Main Wonderland Engine instance.\n *\n * Controls the canvas, rendering, and JS <-> WASM communication.\n */\nexport class WonderlandEngine {\n    /** List of functions to call if a WebXR session is started. */\n    readonly onXRSessionStart: XrSessionStartCallback[] = [];\n\n    /** List of functions to call if a WebXR session ends. */\n    readonly onXRSessionEnd: (() => void)[] = [];\n\n    /** Whether AR is supported by the browser. */\n    readonly arSupported: boolean = false;\n\n    /** Whether VR is supported by the browser. */\n    readonly vrSupported: boolean = false;\n\n    /**\n     * List of functions to call once the main scene has been loaded.\n     */\n    readonly onSceneLoaded: SceneLoadedCallback[] = [];\n\n    /**\n     * Current main scene.\n     */\n    readonly scene: Scene = null!;\n\n    /**\n     * Canvas element that Wonderland Engine renders to.\n     */\n    canvas: HTMLCanvasElement | null = null;\n\n    /**\n     * Access to the textures managed by Wonderland Engine.\n     */\n    textures: TextureCache;\n\n    /**\n     * Access to internationalization.\n     */\n    i18n: I18N;\n\n    /* Component class instances per type to avoid GC */\n    private _componentCache: Record<string, Component[]> = {};\n\n    /* Object class instances per type to avoid GC */\n    private readonly _objectCache: Object3D[] = [];\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @hidden\n     */\n    #wasm: WASM;\n\n    /**\n     * Physics manager, only available when physx is enabled in the runtime.\n     *\n     * @hidden\n     */\n    #physics: Physics | null = null;\n\n    /**\n     * Create a new engine instance.\n     *\n     * @param wasm Wasm bridge instance\n     *\n     * @hidden\n     */\n    constructor(wasm: WASM) {\n        this.#wasm = wasm;\n        this.#wasm['_setEngine'](this); /* String lookup to bypass private. */\n\n        this.textures = {\n            /* Backward compatibility. @todo: Remove at 1.0.0. */\n            load: (filename: string, crossOrigin?: string) => {\n                let image = new Image();\n                if (crossOrigin !== undefined) {\n                    image.crossOrigin = crossOrigin;\n                }\n                image.src = filename;\n                return new Promise((resolve, reject) => {\n                    image.onload = () => {\n                        let texture = new Texture(this, image);\n                        if (!texture.valid) {\n                            reject(\n                                'Failed to add image ' +\n                                    image.src +\n                                    ' to texture atlas. Probably incompatible format.'\n                            );\n                        }\n                        resolve(texture);\n                    };\n                    image.onerror = function () {\n                        reject('Failed to load image. Not found or no read access');\n                    };\n                });\n            },\n        };\n\n        this.i18n = new I18N(this);\n\n        this._componentCache = {};\n        this._objectCache.length = 0;\n    }\n\n    /**\n     * Start the engine if it's not already running.\n     *\n     * When using the {@link loadRuntime} function, this method is called\n     * automatically.\n     */\n    start(): void {\n        this.wasm._wl_application_start();\n    }\n\n    /**\n     * Register a custom JavaScript component type.\n     *\n     * ```js\n     * registerComponent('my-new-type', {\n     *    myParam: {type: Type.Float, default: 42.0},\n     * }, {\n     *    init: function() {},\n     *    start: function() {},\n     *    update: function(dt) {},\n     *    onActivate: function() {},\n     *    onDeactivate: function() {},\n     *    onDestroy: function() {},\n     * });\n     * ```\n     *\n     * @param name Name of the component.\n     * @param params Dict of param names to {@link CustomParameter}.\n     * @param object Object containing functions for the component type.\n     * @deprecated Use {@link WonderlandEngine.registerComponent:CLASSES} instead.\n     */\n    registerComponent(\n        name: string,\n        params: {[key: string]: CustomParameter},\n        object: ComponentProto\n    ): void;\n    /**\n     * Register a custom JavaScript component type.\n     *\n     * You can register a component directly using a class inheriting from {@link Component}:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * export class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myParam: {type: Type.Float, default: 42.0},\n     *     };\n     *     init() {}\n     *     start() {}\n     *     update(dt) {}\n     *     onActivate() {}\n     *     onDeactivate() {}\n     *     onDestroy() {}\n     * });\n     *\n     * // Here, we assume we have an engine already instantiated.\n     * // In general, the registration occurs in the `index.js` file in your\n     * // final application.\n     * engine.registerComponent(MyComponent);\n     * ```\n     *\n     * {@label CLASSES}\n     * @param classes Custom component(s) extending {@link Component}.\n     *\n     * @since 1.0.0\n     */\n    registerComponent(...classes: ComponentConstructor[]): void;\n    /** @overload */\n    registerComponent(...args: unknown[]): void {\n        if (isString(args[0])) {\n            /* Registration is using `name`, `params`, and `object`. */\n            const typeIndex = this.wasm._registerComponentLegacy(\n                args[0],\n                args[1] as {[key: string]: CustomParameter},\n                args[2] as ComponentProto\n            );\n            const ctor = this.wasm._componentTypes[typeIndex] as ComponentConstructor;\n            _setupDefaults(ctor);\n            return;\n        }\n        for (const arg of args) {\n            const typeIndex = this.wasm._registerComponent(arg as ComponentConstructor);\n            const ctor = this.wasm._componentTypes[typeIndex] as ComponentConstructor;\n            _setupDefaults(ctor);\n        }\n    }\n\n    /**\n     * Request a XR session.\n     *\n     * @note Please use this call instead of directly calling `navigator.xr.requestSession()`.\n     * Wonderland Engine requires to be aware that a session is started, and this\n     * is done through this call.\n     *\n     * @param mode The XR mode.\n     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.\n     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.\n     * @returns A promise resolving with the `XRSession`, a string error message otherwise.\n     */\n    requestXRSession(\n        mode: XRSessionMode,\n        features: string[],\n        optionalFeatures?: string[]\n    ): Promise<XRSession> {\n        if (!navigator.xr) {\n            const isLocalhost =\n                location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n            const missingHTTPS = location.protocol !== 'https:' && !isLocalhost;\n            return Promise.reject(\n                missingHTTPS\n                    ? 'WebXR is only supported with HTTPS or on localhost!'\n                    : 'WebXR unsupported in this browser.'\n            );\n        }\n        return this.#wasm.webxr_request_session_func(\n            mode,\n            features,\n            optionalFeatures ?? []\n        );\n    }\n\n    /**\n     * Wrap an object ID using {@link Object}.\n     *\n     * @note This method performs caching and will return the same\n     * instance on subsequent calls.\n     *\n     * @param objectId ID of the object to create.\n     *\n     * @returns The object\n     */\n    wrapObject(objectId: number): Object3D {\n        const cache = this._objectCache;\n        const o = cache[objectId] || (cache[objectId] = new Object3D(this, objectId));\n        o.objectId = objectId;\n        return o;\n    }\n\n    /* Public Getters & Setter */\n\n    /**\n     * WebAssembly bridge.\n     *\n     * @note Use with care. This object is used to communicate\n     * with the WebAssembly code throughout the api.\n     *\n     * @hidden\n     */\n    get wasm(): WASM {\n        return this.#wasm;\n    }\n\n    /** Current WebXR session or `null` if no session active. */\n    get xrSession(): XRSession | null {\n        return this.#wasm.webxr_session;\n    }\n\n    /** Current WebXR frame or `null` if no session active. */\n    get xrFrame(): XRFrame | null {\n        return this.#wasm.webxr_frame;\n    }\n\n    /** Current WebXR frame or `null` if no session active. */\n    get xrBaseLayer(): XRProjectionLayer | null {\n        return this.#wasm.webxr_baseLayer;\n    }\n\n    /** Current WebXR WebGLFramebuffr or `null` if no session active. */\n    get xrFramebuffer(): WebGLFramebuffer | null {\n        if (!Array.isArray(this.wasm.webxr_fbo)) {\n            return this.wasm.GL.framebuffers[this.wasm.webxr_fbo as number];\n        }\n        /* For now, we only use a single framebuffer. */\n        return this.wasm.GL.framebuffers[this.wasm.webxr_fbo[0]];\n    }\n\n    /** Physics manager, only available when physx is enabled in the runtime. */\n    get physics() {\n        return this.#physics;\n    }\n\n    /* Internal-Only Methods */\n\n    /**\n     * Initialize the engine.\n     *\n     * @note Should be called after the WebAssembly is fully loaded.\n     *\n     * @hidden\n     */\n    _init() {\n        (this.scene as Scene) = new Scene(this);\n        /* For internal testing, we provide compatibility with DOM-less execution */\n        this.canvas =\n            typeof document === 'undefined'\n                ? null\n                : (document.getElementById('canvas') as HTMLCanvasElement);\n\n        /* Setup the error handler. This is used to to manage native errors. */\n        this.#wasm._wl_set_error_callback(\n            this.#wasm.addFunction((messagePtr: number) => {\n                throw new Error(this.#wasm.UTF8ToString(messagePtr));\n            }, 'vi')\n        );\n\n        this.#physics = null;\n        if (this.#wasm.withPhysX) {\n            /* Setup the physics callback. */\n            const physics = new Physics(this);\n            this.#wasm._wl_physx_set_collision_callback(\n                this.#wasm.addFunction(\n                    (a: number, index: number, type: number, b: number) => {\n                        const callback = physics._callbacks[a][index];\n                        const component = new PhysXComponent(\n                            this,\n                            this.wasm._typeIndexFor('physx'),\n                            b\n                        );\n                        callback(type, component);\n                    },\n                    'viiii'\n                )\n            );\n            this.#physics = physics;\n        }\n    }\n\n    /**\n     * Reset the runtime state, including:\n     *     - Component cache\n     *     - Images\n     *     - Callbacks\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _reset(): void {\n        this._componentCache = {};\n        this._objectCache.length = 0;\n        this.scene.reset();\n        this.wasm.reset();\n    }\n\n    /**\n     * Retrieves a component instance if it exists, or create and cache\n     * a new one.\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link Object3D.addComponent} instead.\n     *\n     * @param type component type name\n     * @param componentType Component manager index\n     * @param componentId Component id in the manager\n     *\n     * @returns JavaScript instance wrapping the native component\n     *\n     * @hidden\n     */\n    _wrapComponent(type: string, componentType: number, componentId: number) {\n        if (componentId < 0) return null;\n\n        /* @todo: extremely slow in JS to do that... Better to use a Map or allocate the array. */\n        const c =\n            this._componentCache[componentType] ||\n            (this._componentCache[componentType] = []);\n        if (c[componentId]) {\n            return c[componentId];\n        }\n\n        let component: Component;\n        if (type == 'collision') {\n            component = new CollisionComponent(this, componentType, componentId);\n        } else if (type == 'text') {\n            component = new TextComponent(this, componentType, componentId);\n        } else if (type == 'view') {\n            component = new ViewComponent(this, componentType, componentId);\n        } else if (type == 'mesh') {\n            component = new MeshComponent(this, componentType, componentId);\n        } else if (type == 'input') {\n            component = new InputComponent(this, componentType, componentId);\n        } else if (type == 'light') {\n            component = new LightComponent(this, componentType, componentId);\n        } else if (type == 'animation') {\n            component = new AnimationComponent(this, componentType, componentId);\n        } else if (type == 'physx') {\n            component = new PhysXComponent(this, componentType, componentId);\n        } else {\n            const typeIndex = this.wasm._componentTypeIndices[type];\n            const constructor = this.wasm._componentTypes[typeIndex];\n            component = new constructor(this);\n        }\n        /* Sets the manager and identifier from the outside, to\n         * simplify the user's constructor. */\n        /* @ts-ignore */\n        component._engine = this;\n        (component._manager as number) = componentType;\n        (component._id as number) = componentId;\n        c[componentId] = component;\n        return component;\n    }\n}\n", "import {WonderlandEngine} from './engine.js';\nimport {\n    Animation,\n    Object as $Object,\n    Component,\n    ComponentConstructor,\n    ComponentProto,\n    CustomParameter,\n    Material,\n    Mesh,\n    Skin,\n    Texture,\n} from './wonderland.js';\n\n/**\n * Material definition interface.\n *\n * @hidden\n */\nexport interface MaterialDefinition {\n    index: number;\n    type: {\n        type: number;\n        componentCount: number;\n        metaType: number;\n    };\n}\n\ntype XRRequestSessionFunc = (\n    mode: XRSessionMode,\n    requiredFeatures: string[],\n    optionalFeatures: string[]\n) => Promise<XRSession>;\n\n/**\n * Low-level wrapper to interact with the WebAssembly code.\n *\n * @hidden\n */\nexport class WASM {\n    /**\n     * Emscripten worker field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly worker: string = '';\n\n    /**\n     * Emscripten wasm field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly wasm: ArrayBuffer = null!;\n\n    /** Current WebXR  */\n\n    /**\n     * Emscripten WebXR session.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_session: XRSession | null = null;\n\n    /**\n     * Emscripten WebXR request session callback.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_request_session_func: XRRequestSessionFunc = null!;\n\n    /**\n     * Emscripten WebXR frame.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_frame: XRFrame | null = null;\n\n    /**\n     * Emscripten WebXR GL projection layer.\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_baseLayer: XRProjectionLayer | null = null;\n\n    /**\n     * Emscripten WebXR framebuffer(s).\n     *\n     * @note This api is meant to be used internally.\n     */\n    readonly webxr_fbo: number | number[] = -1;\n\n    /**\n     * Convert a WASM memory view to a JavaScript string.\n     *\n     * @param ptr Pointer start\n     * @param ptrEnd Pointer end\n     * @returns JavaScript string\n     */\n    UTF8ViewToString: (ptr: number, ptrEnd: number) => string;\n\n    /** If `true`, logs will not spam the console on error. */\n    _deactivate_component_on_error: boolean = false;\n\n    /** Temporary memory pointer. */\n    _tempMem: number = null!;\n    /** Temporary memory size. */\n    _tempMemSize: number = 0;\n    /** Temporary float memory view. */\n    _tempMemFloat: Float32Array = null!;\n    /** Temporary int memory view. */\n    _tempMemInt: Int32Array = null!;\n    /** Temporary uint8 memory view. */\n    _tempMemUint8: Uint8Array = null!;\n    /** Temporary uint32 memory view. */\n    _tempMemUint32: Uint32Array = null!;\n    /** Temporary uint16 memory view. */\n    _tempMemUint16: Uint16Array = null!;\n\n    /** List of callbacks triggered when the scene is loaded. */\n    readonly _sceneLoadedCallback: any[] = [];\n\n    /**\n     * Material definition cache. Each pipeline has its own\n     * associated material definition.\n     */\n    _materialDefinitions: Map<string | symbol, MaterialDefinition>[] = [];\n\n    /** Image cache. */\n    _images: (HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null)[] = [];\n\n    /** Component instances. */\n    _components: Component[] = [];\n\n    /** Component Type info. */\n    _componentTypes: ComponentConstructor[] = [];\n\n    /** Index per component type name. */\n    _componentTypeIndices: Record<string, number> = {};\n\n    /** Wonderland engine instance. */\n    private _engine: WonderlandEngine = null!;\n\n    /**\n     * `true` if this runtime is using physx.\n     *\n     * @note This api is meant to be used internally.\n     */\n    private _withPhysX: boolean = false;\n\n    /** Decoder for UTF8 `ArrayBuffer` to JavaScript string. */\n    private readonly _utf8Decoder = new TextDecoder('utf8');\n\n    /**\n     * Create a new instance of the WebAssembly <> API bridge.\n     *\n     * @param threads `true` if the runtime used has threads support\n     */\n    constructor(threads: boolean) {\n        if (threads) {\n            this.UTF8ViewToString = (s: number, e: number) => {\n                if (!s) return '';\n                return this._utf8Decoder.decode(this.HEAPU8.slice(s, e));\n            };\n            return;\n        }\n        this.UTF8ViewToString = (s: number, e: number) => {\n            if (!s) return '';\n            return this._utf8Decoder.decode(this.HEAPU8.subarray(s, e));\n        };\n    }\n\n    /**\n     * Reset the cache of the library\n     *\n     * @note Should only be called when tearing down the runtime.\n     */\n    reset() {\n        this._materialDefinitions = [];\n        this._images = [];\n        this._components = [];\n        this._componentTypes = [];\n        this._componentTypeIndices = {};\n    }\n\n    /**\n     * Register a legacy component in this emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param typeName The name of the component\n     * @param params An object containing the parameters (properties)\n     * @param object The object's prototype\n     * @returns The registration index\n     */\n    _registerComponentLegacy(\n        typeName: string,\n        params: {[key: string]: CustomParameter},\n        object: ComponentProto\n    ) {\n        const ctor = class CustomComponent extends Component {};\n        ctor.TypeName = typeName;\n        ctor.Properties = params;\n        Object.assign(ctor.prototype, object);\n        return this._registerComponent(ctor);\n    }\n\n    /**\n     * Register a class component in this emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param ctor The class to register.\n     * @returns The registration index\n     */\n    _registerComponent(ctor: ComponentConstructor) {\n        /** @todo: This is commented on purpose.\n         *\n         * It should be added back when we support a pure-npm setup with **no** prebundling\n         * of the API for the user.\n         *\n         * The condition below fails because the user ends up with two distincts WLE api.\n         */\n        /* if(!(ctor.prototype instanceof WL.Component))\n              throw new Error('component must extend WL.Component.'); */\n\n        if (!ctor.TypeName) throw new Error('no name provided for component.');\n\n        const typeIndex =\n            ctor.TypeName in this._componentTypeIndices\n                ? this._componentTypeIndices[ctor.TypeName]\n                : this._componentTypes.length;\n        this._componentTypes[typeIndex] = ctor;\n        this._componentTypeIndices[ctor.TypeName] = typeIndex;\n\n        console.log('WL: registered component', ctor.TypeName, 'with index', typeIndex);\n\n        return typeIndex;\n    }\n\n    /**\n     * Allocate the requested amount of temporary memory\n     * in this WASM instance.\n     *\n     * @param size The number of bytes to allocate\n     */\n    allocateTempMemory(size: number) {\n        console.log('Allocating temp mem:', size);\n        this._tempMemSize = size;\n        if (this._tempMem) this._free(this._tempMem);\n        this._tempMem = this._malloc(this._tempMemSize);\n        this.updateTempMemory();\n    }\n\n    /**\n     * @todo: Delete this and only keep `allocateTempMemory`\n     *\n     * @param size Number of bytes to allocate\n     */\n    requireTempMem(size: number) {\n        if (this._tempMemSize >= size) return;\n        /* Grow in 1kb increments */\n        this.allocateTempMemory(Math.ceil(size / 1024) * 1024);\n    }\n\n    /**\n     * Update the temporary memory views. This must be called whenever the\n     * temporary memory address changes.\n     *\n     * @note This api is meant to be used internally.\n     */\n    updateTempMemory() {\n        this._tempMemFloat = new Float32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemInt = new Int32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint32 = new Uint32Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 2\n        );\n        this._tempMemUint16 = new Uint16Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize >> 1\n        );\n        this._tempMemUint8 = new Uint8Array(\n            this.HEAP8.buffer,\n            this._tempMem,\n            this._tempMemSize\n        );\n    }\n\n    /**\n     * Returns a uint8 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU8(count: number): Uint8Array {\n        this.requireTempMem(count);\n        return this._tempMemUint8;\n    }\n\n    /**\n     * Returns a uint16 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU16(count: number): Uint16Array {\n        this.requireTempMem(count * 2);\n        return this._tempMemUint16;\n    }\n\n    /**\n     * Returns a uint32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferU32(count: number): Uint32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemUint32;\n    }\n\n    /**\n     * Returns a int32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferI32(count: number): Int32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemInt;\n    }\n\n    /**\n     * Returns a float32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferF32(count: number): Float32Array {\n        this.requireTempMem(count * 4);\n        return this._tempMemFloat;\n    }\n\n    /**\n     * Return the index of the component type.\n     *\n     * @param type The type\n     * @return The component type index\n     */\n    _typeIndexFor(type: string): number {\n        const lengthBytes = this.lengthBytesUTF8(type) + 1;\n        const mem = this._malloc(lengthBytes);\n        this.stringToUTF8(type, mem, lengthBytes);\n        const componentType = this._engine.wasm._wl_get_component_manager_index(mem);\n        this._free(mem);\n\n        return componentType;\n    }\n\n    /**\n     * Return the name of component type stored at the given index.\n     *\n     * @param typeIndex The type index\n     * @return The name as a string\n     */\n    _typeNameFor(typeIndex: number) {\n        return this.UTF8ToString(this._wl_component_manager_name(typeIndex));\n    }\n\n    /**\n     * Notify that a scene has just been loaded.\n     *\n     * @note This api is meant to be used internally.\n     */\n    _notifySceneLoaded() {\n        for (const f of this._engine.onSceneLoaded) {\n            try {\n                f();\n            } catch (e) {\n                console.error('Exception during onSceneLoaded callback');\n                console.error(e);\n            }\n        }\n    }\n\n    /**\n     * Notify that a the language was changed and texts have been updated.\n     *\n     * @note This api is meant to be used internally.\n     */\n    _notifyLanguageChanged(oldIndex: number, newIndex: number) {\n        for (const f of this._engine.i18n.onLanguageChanged) {\n            try {\n                f(oldIndex, newIndex);\n            } catch (e) {\n                console.error('Exception during onLanguageChanged callback');\n                console.error(e);\n            }\n        }\n    }\n\n    /**\n     * Returns `true` if the runtime supports physx or not.\n     */\n    get withPhysX(): boolean {\n        return this._withPhysX;\n    }\n\n    /**\n     * Set the engine instance holding this bridge.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param engine The engine instance.\n     */\n    protected _setEngine(engine: WonderlandEngine): void {\n        this._engine = engine;\n    }\n\n    /* WebAssembly to JS call bridge. */\n\n    protected __wljs_xr_session_start(mode: XRSessionMode) {\n        for (const cb of this._engine.onXRSessionStart) {\n            try {\n                cb(this.webxr_session!, mode);\n            } catch (e) {\n                console.error('Exception during onXRSessionStart callback:');\n                console.error(e);\n            }\n        }\n    }\n    protected __wljs_xr_session_end() {\n        for (const cb of this._engine.onXRSessionEnd) {\n            try {\n                cb();\n            } catch (e) {\n                console.error('Exception during onXRSessionEnd callback:');\n                console.error(e);\n            }\n        }\n    }\n    protected __wljs_xr_disable() {\n        /* @todo This could directly be fully handled in JS. */\n        (this._engine.arSupported as boolean) = false;\n        (this._engine.vrSupported as boolean) = false;\n    }\n    protected __wljs_engine_pre_render() {\n        const scene = this._engine.scene;\n        for (const cb of scene.onPreRender) {\n            cb();\n        }\n    }\n    protected __wljs_engine_post_render() {\n        const scene = this._engine.scene;\n        for (const cb of scene.onPostRender) {\n            cb();\n        }\n    }\n    protected __wljs_allocate(numComponents: number) {\n        this._components = new Array(numComponents);\n    }\n    protected __wljs_init(withPhysX: boolean) {\n        this._withPhysX = withPhysX;\n\n        /* Target memory for JS API functions that return arrays */\n        this.allocateTempMemory(1024);\n    }\n    protected __wljs_reallocate(numComponents: number) {\n        if (numComponents > this._components.length) {\n            this._components.length = numComponents;\n        }\n    }\n    protected __wljs_scene_add_material_definition(definitionId: number) {\n        const definition = new Map();\n        /* Cache material definition for faster read/write */\n        const nbParams = this._wl_material_definition_get_count(definitionId);\n        for (let i = 0; i < nbParams; ++i) {\n            const name = this.UTF8ToString(\n                this._wl_material_definition_get_param_name(definitionId, i)\n            );\n            const t = this._wl_material_definition_get_param_type(definitionId, i);\n            definition.set(name, {\n                index: i,\n                type: {\n                    type: t & 0xff,\n                    componentCount: (t >> 8) & 0xff,\n                    metaType: (t >> 16) & 0xff,\n                },\n            });\n        }\n        this._materialDefinitions[definitionId] = definition;\n    }\n    protected __wljs_set_component_param_bool(c: number, p: number, pe: number, v: number) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] = v !== 0;\n    }\n    protected __wljs_set_component_param_int(c: number, p: number, pe: number, v: number) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] = v;\n    }\n    protected __wljs_set_component_param_float(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] = v;\n    }\n    protected __wljs_set_component_param_string(\n        c: number,\n        p: number,\n        pe: number,\n        v: number,\n        ve: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        const value = this.UTF8ViewToString(v, ve);\n        (this._components[c] as Record<string, any>)[param] = value;\n    }\n    protected __wljs_set_component_param_color(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] = new Float32Array(\n            [0, 8, 16, 24].map((s) => ((v >>> s) & 0xff) / 255.0)\n        );\n    }\n    protected __wljs_set_component_param_object(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? this._engine.wrapObject(v) : null;\n    }\n    protected __wljs_set_component_param_mesh(c: number, p: number, pe: number, v: number) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? new Mesh(this._engine, v) : null;\n    }\n    protected __wljs_set_component_param_texture(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? new Texture(this._engine, v) : null;\n    }\n    protected __wljs_set_component_param_material(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? new Material(this._engine, v) : null;\n    }\n    protected __wljs_set_component_param_animation(\n        c: number,\n        p: number,\n        pe: number,\n        v: number\n    ) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? new Animation(this._engine, v) : null;\n    }\n    protected __wljs_set_component_param_skin(c: number, p: number, pe: number, v: number) {\n        const param = this.UTF8ViewToString(p, pe);\n        (this._components[c] as Record<string, any>)[param] =\n            v > 0 ? new Skin(this._engine, v) : null;\n    }\n    protected __wljs_get_component_type_index(typenamePtr: number) {\n        return this._componentTypeIndices[this.UTF8ToString(typenamePtr)];\n    }\n    protected __wljs_component_create(\n        jsManagerIndex: number,\n        index: number,\n        id: number,\n        type: number,\n        object: number\n    ) {\n        const ctor = this._componentTypes[type];\n        const component = new ctor();\n        /* Sets the manager and identifier from the outside, to simplify the user's constructor. */\n\n        /* @ts-ignore */\n        component._engine = this._engine;\n        (component._manager as number) = jsManagerIndex;\n        (component._id as number) = id;\n        (component._object as $Object) = this._engine.wrapObject(object);\n        /* @todo: remove ._type and use the constructor directly.\n         * We can't do it safely yet because of uglifyjs. */\n        component._type = ctor.TypeName;\n        this._components[index] = component;\n        return component;\n    }\n    __wljs_component_init(component: number) {\n        const c = this._components[component];\n        if (c.init) {\n            try {\n                c.init();\n            } catch (e) {\n                console.error(\n                    `Exception during ${c.type} init() on object ${c.object.name}`\n                );\n                console.error(e);\n            }\n        }\n\n        if (c.start) {\n            /* Arm onActivate() with the initial start() call */\n            const oldActivate = c.onActivate;\n            c.onActivate = function () {\n                /* As \"component\" is the component index, which may change\n                 * through calls to init() and start(), we call it on the\n                 * calling object, which will be the component, instead of\n                 * wljs_component_start() etc */\n                try {\n                    if (this.start) this.start();\n                } catch (e) {\n                    console.error(\n                        `Exception during ${this.type} start() on object ${this.object.name}`\n                    );\n                    console.error(e);\n                }\n                this.onActivate = oldActivate;\n                if (this.onActivate) {\n                    try {\n                        this.onActivate();\n                    } catch (e) {\n                        console.error(\n                            `Exception during ${this.type} onActivate() on object ${this.object.name}`\n                        );\n                        console.error(e);\n                    }\n                }\n            };\n        }\n    }\n    protected __wljs_component_update(component: number, dt: number) {\n        const c = this._components[component];\n        if (!c) {\n            console.warn('WL: component was undefined:', component);\n            this._components[component] = new Component(this._engine);\n            return;\n        }\n        if (!c.update) return;\n        try {\n            c.update(dt);\n        } catch (e) {\n            console.error(`Exception during ${c.type} update() on object ${c.object.name}`);\n            console.error(e);\n            if (this._deactivate_component_on_error) c.active = false;\n        }\n    }\n    protected __wljs_component_onActivate(component: number) {\n        const c = this._components[component];\n        if (!c || !c.onActivate) return;\n        try {\n            c.onActivate();\n        } catch (e) {\n            console.error(\n                `Exception during ${c.type} onActivate() on object ${c.object.name}`\n            );\n            console.error(e);\n        }\n    }\n    protected __wljs_component_onDeactivate(component: number) {\n        const c = this._components[component];\n        if (!c.onDeactivate) return;\n        try {\n            c.onDeactivate();\n        } catch (e) {\n            console.error(\n                `Exception during ${c.type} onDeactivate() on object ${c.object.name}`\n            );\n            console.error(e);\n        }\n    }\n    protected __wljs_component_onDestroy(component: number) {\n        const c = this._components[component];\n        if (!c.onDestroy) return;\n        try {\n            c.onDestroy();\n        } catch (e) {\n            console.error(\n                `Exception during ${c.type} onDestroy() on object ${c.object.name}`\n            );\n            console.error(e);\n        }\n    }\n    protected __wljs_swap(a: number, b: number) {\n        const componentA = this._components[a];\n        this._components[a] = this._components[b];\n        this._components[b] = componentA;\n    }\n\n    /* JS to WebAssembly bridge. */\n\n    HEAP8: Int8Array = null!;\n    HEAPU8: Uint8Array = null!;\n    HEAPU16: Uint16Array = null!;\n    HEAPU32: Uint32Array = null!;\n    HEAP32: Int32Array = null!;\n    HEAPF32: Float32Array = null!;\n\n    GL: {\n        framebuffers: WebGLFramebuffer[];\n    } = null!;\n\n    assert: (condition: boolean, msg?: string) => void = null!;\n    _free: (ptr: number) => void = null!;\n    _malloc: (size: number) => number = null!;\n    lengthBytesUTF8: (str: string) => number = null!;\n    stringToUTF8: (str: string, outPtr: number, len: number) => void = null!;\n    UTF8ToString: (ptr: number) => string = null!;\n    addFunction: (func: Function, sig: string) => number = null!;\n\n    _wl_set_error_callback: (cbPtr: number) => void = null!;\n    _wl_application_start: () => void = null!;\n    _wl_scene_get_active_views: (ptr: number, count: number) => number = null!;\n    _wl_scene_ray_cast: (\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        group: number,\n        outPtr: number\n    ) => void = null!;\n    _wl_scene_add_object: (parentId: number) => number = null!;\n    _wl_scene_add_objects: (\n        parentId: number,\n        count: number,\n        componentCountHint: number,\n        ptr: number,\n        size: number\n    ) => number = null!;\n    _wl_scene_reserve_objects: (objectCount: number, _tempMem: number) => void = null!;\n    _wl_scene_set_clearColor: (r: number, g: number, b: number, a: number) => void = null!;\n    _wl_scene_enableColorClear: (b: boolean) => void = null!;\n    _wl_load_scene: (ptr: number) => void = null!;\n    _wl_append_scene: (ptr: number, loadGltfExtensions: boolean, callback: number) => void =\n        null!;\n    _wl_scene_reset: () => void = null!;\n    _wl_component_get_object: (manager: number, id: number) => number = null!;\n    _wl_component_setActive: (manager: number, id: number, active: boolean) => void = null!;\n    _wl_component_isActive: (manager: number, id: number) => number = null!;\n    _wl_component_remove: (manager: number, id: number) => void = null!;\n    _wl_collision_component_get_collider: (id: number) => number = null!;\n    _wl_collision_component_set_collider: (id: number, collider: number) => void = null!;\n    _wl_collision_component_get_extents: (id: number) => number = null!;\n    _wl_collision_component_get_group: (id: number) => number = null!;\n    _wl_collision_component_set_group: (id: number, group: number) => void = null!;\n    _wl_collision_component_query_overlaps: (\n        id: number,\n        outPtr: number,\n        outCount: number\n    ) => number = null!;\n    _wl_text_component_get_horizontal_alignment: (id: number) => number = null!;\n    _wl_text_component_set_horizontal_alignment: (id: number, alignment: number) => void =\n        null!;\n    _wl_text_component_get_vertical_alignment: (id: number) => number = null!;\n    _wl_text_component_set_vertical_alignment: (id: number, justification: number) => void =\n        null!;\n    _wl_text_component_get_character_spacing: (id: number) => number = null!;\n    _wl_text_component_set_character_spacing: (id: number, spacing: number) => void = null!;\n    _wl_text_component_get_line_spacing: (id: number) => number = null!;\n    _wl_text_component_set_line_spacing: (id: number, spacing: number) => void = null!;\n    _wl_text_component_get_effect: (id: number) => number = null!;\n    _wl_text_component_set_effect: (id: number, spacing: number) => void = null!;\n    _wl_text_component_get_text: (id: number) => number = null!;\n    _wl_text_component_set_text: (id: number, ptr: number) => void = null!;\n    _wl_text_component_set_material: (id: number, materialId: number) => void = null!;\n    _wl_text_component_get_material: (id: number) => number = null!;\n    _wl_view_component_get_projection_matrix: (id: number) => number = null!;\n    _wl_view_component_get_near: (id: number) => number = null!;\n    _wl_view_component_set_near: (id: number, near: number) => void = null!;\n    _wl_view_component_get_far: (id: number) => number = null!;\n    _wl_view_component_set_far: (id: number, far: number) => void = null!;\n    _wl_view_component_get_fov: (id: number) => number = null!;\n    _wl_view_component_set_fov: (id: number, fov: number) => void = null!;\n    _wl_input_component_get_type: (id: number) => number = null!;\n    _wl_input_component_set_type: (id: number, type: number) => void = null!;\n    _wl_light_component_get_color: (id: number) => number = null!;\n    _wl_light_component_get_type: (id: number) => number = null!;\n    _wl_light_component_set_type: (id: number, type: number) => void = null!;\n    _wl_animation_component_get_animation: (id: number) => number = null!;\n    _wl_animation_component_set_animation: (id: number, animId: number) => void = null!;\n    _wl_animation_component_get_playCount: (id: number) => number = null!;\n    _wl_animation_component_set_playCount: (id: number, count: number) => void = null!;\n    _wl_animation_component_get_speed: (id: number) => number = null!;\n    _wl_animation_component_set_speed: (id: number, speed: number) => void = null!;\n    _wl_animation_component_play: (id: number) => void = null!;\n    _wl_animation_component_stop: (id: number) => void = null!;\n    _wl_animation_component_pause: (id: number) => void = null!;\n    _wl_animation_component_state: (id: number) => number = null!;\n    _wl_mesh_component_get_material: (id: number) => number = null!;\n    _wl_mesh_component_set_material: (id: number, materialId: number) => void = null!;\n    _wl_mesh_component_get_mesh: (id: number) => number = null!;\n    _wl_mesh_component_set_mesh: (id: number, meshId: number) => void = null!;\n    _wl_mesh_component_get_skin: (id: number) => number = null!;\n    _wl_mesh_component_set_skin: (id: number, skinId: number) => void = null!;\n    _wl_physx_component_get_static: (id: number) => number = null!;\n    _wl_physx_component_set_static: (id: number, flag: boolean) => void = null!;\n    _wl_physx_component_get_kinematic: (id: number) => number = null!;\n    _wl_physx_component_set_kinematic: (id: number, kinematic: boolean) => void = null!;\n    _wl_physx_component_get_gravity: (id: number) => number = null!;\n    _wl_physx_component_set_gravity: (id: number, gravity: boolean) => void = null!;\n    _wl_physx_component_get_simulate: (id: number) => number = null!;\n    _wl_physx_component_set_simulate: (id: number, simulation: boolean) => void = null!;\n    _wl_physx_component_get_allowSimulation: (id: number) => number = null!;\n    _wl_physx_component_set_allowSimulation: (\n        id: number,\n        allowSimulation: boolean\n    ) => void = null!;\n    _wl_physx_component_get_allowQuery: (id: number) => number = null!;\n    _wl_physx_component_set_allowQuery: (id: number, allowQuery: boolean) => void = null!;\n    _wl_physx_component_get_trigger: (id: number) => number = null!;\n    _wl_physx_component_set_trigger: (id: number, trigger: boolean) => void = null!;\n    _wl_physx_component_get_shape: (id: number) => number = null!;\n    _wl_physx_component_set_shape: (id: number, shape: number) => void = null!;\n    _wl_physx_component_get_shape_data: (id: number) => number = null!;\n    _wl_physx_component_set_shape_data: (id: number, shapeIndex: number) => void = null!;\n    _wl_physx_component_get_extents: (id: number) => number = null!;\n    _wl_physx_component_get_staticFriction: (id: number) => number = null!;\n    _wl_physx_component_set_staticFriction: (id: number, value: number) => void = null!;\n    _wl_physx_component_get_dynamicFriction: (id: number) => number = null!;\n    _wl_physx_component_set_dynamicFriction: (id: number, value: number) => void = null!;\n    _wl_physx_component_get_bounciness: (id: number) => number = null!;\n    _wl_physx_component_set_bounciness: (id: number, value: number) => void = null!;\n    _wl_physx_component_get_linearDamping: (id: number) => number = null!;\n    _wl_physx_component_set_linearDamping: (id: number, value: number) => void = null!;\n    _wl_physx_component_get_angularDamping: (id: number) => number = null!;\n    _wl_physx_component_set_angularDamping: (id: number, value: number) => void = null!;\n    _wl_physx_component_get_linearVelocity: (id: number, ptr: number) => number = null!;\n    _wl_physx_component_set_linearVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void = null!;\n    _wl_physx_component_get_angularVelocity: (id: number, ptr: number) => number = null!;\n    _wl_physx_component_set_angularVelocity: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void = null!;\n    _wl_physx_component_get_groupsMask: (id: number) => number = null!;\n    _wl_physx_component_set_groupsMask: (id: number, flags: number) => void = null!;\n    _wl_physx_component_get_blocksMask: (id: number) => number = null!;\n    _wl_physx_component_set_blocksMask: (id: number, flags: number) => void = null!;\n    _wl_physx_component_get_linearLockAxis: (id: number) => number = null!;\n    _wl_physx_component_set_linearLockAxis: (id: number, lock: number) => void = null!;\n    _wl_physx_component_get_angularLockAxis: (id: number) => number = null!;\n    _wl_physx_component_set_angularLockAxis: (id: number, lock: number) => void = null!;\n    _wl_physx_component_get_mass: (id: number) => number = null!;\n    _wl_physx_component_set_mass: (id: number, value: number) => void = null!;\n    _wl_physx_component_set_massSpaceInertiaTensor: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void = null!;\n    _wl_physx_component_addForce: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean\n    ) => void = null!;\n    _wl_physx_component_addForceAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number,\n        localForce: boolean,\n        posX: number,\n        posY: number,\n        posZ: number,\n        local: boolean\n    ) => void = null!;\n    _wl_physx_component_addTorque: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        mode: number\n    ) => void = null!;\n    _wl_physx_component_addCallback: (id: number, otherId: number) => number = null!;\n    _wl_physx_component_removeCallback: (id: number, callbackId: number) => number = null!;\n    _wl_physx_update: (delta: number) => void = null!;\n    _wl_physx_update_global_pose: (object: number, component: number) => void = null!;\n    _wl_physx_ray_cast: (\n        x: number,\n        y: number,\n        z: number,\n        dx: number,\n        dy: number,\n        dz: number,\n        group: number,\n        maxDistance: number,\n        outPtr: number\n    ) => void = null!;\n    _wl_physx_set_collision_callback: (callback: number) => void = null!;\n    _wl_mesh_create: (\n        indicesPtr: number,\n        indicesSize: number,\n        indexType: number,\n        vertexCount: number,\n        skinned: boolean\n    ) => number = null!;\n    _wl_mesh_get_vertexData: (id: number, outPtr: number) => number = null!;\n    _wl_mesh_get_vertexCount: (id: number) => number = null!;\n    _wl_mesh_get_indexData: (id: number, outPtr: number, count: number) => number = null!;\n    _wl_mesh_update: (id: number) => void = null!;\n    _wl_mesh_get_boundingSphere: (id: number, outPtr: number) => void = null!;\n    _wl_mesh_get_attribute: (id: number, attribute: number, outPtr: number) => void = null!;\n    _wl_mesh_destroy: (id: number) => void = null!;\n    _wl_mesh_get_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcStride: number,\n        dstFormatSize: number,\n        destPtr: number,\n        dstSize: number\n    ) => void = null!;\n    _wl_mesh_set_attribute_values: (\n        attribute: number,\n        srcFormatSize: number,\n        srcPtr: number,\n        srcSize: number,\n        dstFormatSize: number,\n        destPtr: number,\n        destStride: number\n    ) => void = null!;\n    _wl_material_create: (ptr: number) => number = null!;\n    _wl_material_get_definition: (id: number) => number = null!;\n    _wl_material_definition_get_count: (id: number) => number = null!;\n    _wl_material_definition_get_param_name: (id: number, index: number) => number = null!;\n    _wl_material_definition_get_param_type: (id: number, index: number) => number = null!;\n    _wl_material_get_shader: (id: number) => number = null!;\n    _wl_material_clone: (id: number) => number = null!;\n    _wl_material_get_param_index: (id: number, namePtr: number) => number = null!;\n    _wl_material_get_param_type: (id: number, paramId: number) => number = null!;\n    _wl_material_get_param_value: (id: number, paramId: number, outPtr: number) => number =\n        null!;\n    _wl_material_set_param_value_uint: (\n        id: number,\n        paramId: number,\n        valueId: number\n    ) => void = null!;\n    _wl_material_set_param_value_float: (\n        id: number,\n        paramId: number,\n        ptr: number,\n        count: number\n    ) => void = null!;\n    _wl_renderer_addImage: (id: number) => number = null!;\n    _wl_texture_width: (id: number) => number = null!;\n    _wl_texture_height: (id: number) => number = null!;\n    _wl_renderer_updateImage: (\n        id: number,\n        imageIndex: number,\n        xOffset?: number,\n        yOffset?: number\n    ) => void = null!;\n    _wl_texture_destroy: (id: number) => void = null!;\n    _wl_animation_get_duration: (id: number) => number = null!;\n    _wl_animation_get_trackCount: (id: number) => number = null!;\n    _wl_animation_retargetToSkin: (id: number, targetId: number) => number = null!;\n    _wl_animation_retarget: (id: number, ptr: number) => number = null!;\n    _wl_object_name: (id: number) => number = null!;\n    _wl_object_set_name: (id: number, ptr: number) => void = null!;\n    _wl_object_parent: (id: number) => number = null!;\n    _wl_object_get_children_count: (id: number) => number = null!;\n    _wl_object_get_children: (id: number, outPtr: number, count: number) => number = null!;\n    _wl_object_set_parent: (id: number, parentId: number) => void = null!;\n    _wl_object_reset_scaling: (id: number) => void = null!;\n    _wl_object_reset_translation_rotation: (id: number) => void = null!;\n    _wl_object_reset_rotation: (id: number) => void = null!;\n    _wl_object_reset_translation: (id: number) => void = null!;\n    _wl_object_translate: (id: number, x: number, y: number, z: number) => void = null!;\n    _wl_object_translate_obj: (id: number, x: number, y: number, z: number) => void = null!;\n    _wl_object_translate_world: (id: number, x: number, y: number, z: number) => void =\n        null!;\n    _wl_object_rotate_axis_angle: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void = null!;\n    _wl_object_rotate_axis_angle_rad: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void = null!;\n    _wl_object_rotate_axis_angle_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        deg: number\n    ) => void = null!;\n    _wl_object_rotate_axis_angle_rad_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        rad: number\n    ) => void = null!;\n    _wl_object_rotate_quat: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void = null!;\n    _wl_object_rotate_quat_obj: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void = null!;\n    _wl_object_scale: (id: number, x: number, y: number, z: number) => void = null!;\n    _wl_object_trans_local: (id: number) => number = null!;\n    _wl_object_get_translation_local: (id: number, outPtr: number) => void = null!;\n    _wl_object_set_translation_local: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void = null!;\n    _wl_object_get_translation_world: (id: number, outPtr: number) => void = null!;\n    _wl_object_set_translation_world: (\n        id: number,\n        x: number,\n        y: number,\n        z: number\n    ) => void = null!;\n    _wl_object_trans_world: (id: number) => number = null!;\n    _wl_object_trans_world_to_local: (id: number) => number = null!;\n    _wl_object_scaling_local: (id: number) => number = null!;\n    _wl_object_scaling_world: (id: number) => number = null!;\n    _wl_object_scaling_world_to_local: (id: number) => number = null!;\n    _wl_object_set_rotation_local: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void = null!;\n    _wl_object_set_rotation_world: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        w: number\n    ) => void = null!;\n    _wl_object_transformVectorWorld: (id: number, ptr: number) => number = null!;\n    _wl_object_transformVectorLocal: (id: number, ptr: number) => number = null!;\n    _wl_object_transformPointWorld: (id: number, ptr: number) => number = null!;\n    _wl_object_transformPointLocal: (id: number, ptr: number) => number = null!;\n    _wl_object_transformVectorInverseWorld: (id: number, ptr: number) => number = null!;\n    _wl_object_transformVectorInverseLocal: (id: number, ptr: number) => number = null!;\n    _wl_object_transformPointInverseWorld: (id: number, ptr: number) => number = null!;\n    _wl_object_transformPointInverseLocal: (id: number, ptr: number) => number = null!;\n    _wl_object_toWorldSpaceTransform: (id: number, ptr: number) => number = null!;\n    _wl_object_toObjectSpaceTransform: (id: number, ptr: number) => number = null!;\n    _wl_object_lookAt: (\n        id: number,\n        x: number,\n        y: number,\n        z: number,\n        upX: number,\n        upY: number,\n        upZ: number\n    ) => void = null!;\n    _wl_scene_remove_object: (id: number) => void = null!;\n    _wl_object_set_dirty: (id: number) => void = null!;\n    _wl_get_component_manager_index: (ptr: number) => number = null!;\n    _wl_get_js_component_index: (id: number, outPtr: number, count: number) => number =\n        null!;\n    _wl_get_js_component_index_for_id: (id: number) => number = null!;\n    _wl_get_component_id: (id: number, managerId: number, index: number) => number = null!;\n    _wl_object_get_components: (id: number, outPtr: number, count: number) => number =\n        null!;\n    _wl_object_get_component_types: (id: number, outPtr: number, count: number) => void =\n        null!;\n    _wl_object_add_js_component: (id: number, typeId: number) => number = null!;\n    _wl_object_add_component: (id: number, typeId: number) => number = null!;\n    _wl_object_is_changed: (id: number) => number = null!;\n    _wl_component_manager_name: (id: number) => number = null!;\n    _wl_skin_get_joint_count: (id: number) => number = null!;\n    _wl_skin_joint_ids: (id: number) => number = null!;\n    _wl_skin_inverse_bind_transforms: (id: number) => number = null!;\n    _wl_skin_inverse_bind_scalings: (id: number) => number = null!;\n    _wl_math_cubicHermite: (\n        a: number,\n        b: number,\n        c: number,\n        d: number,\n        f: number,\n        e: number,\n        isQuat: boolean\n    ) => void = null!;\n    _wl_i18n_setLanguage: (ptr: number) => void = null!;\n    _wl_i18n_currentLanguage: () => number = null!;\n    _wl_i18n_translate: (ptr: number) => number = null!;\n    _wl_i18n_languageCount: () => number = null!;\n    _wl_i18n_languageIndex: (ptr: number) => number = null!;\n    _wl_i18n_languageCode: (index: number) => number = null!;\n    _wl_i18n_languageName: (index: number) => number = null!;\n}\n", "import {isString} from './object.js';\n\n/**\n * Listener callback type, used in {@link Emitter.add}.\n */\nexport type ListenerCallback<T extends unknown[] = void[]> = (...data: T) => void;\n\n/**\n * Registration options for a listener in an {@link Emitter}.\n */\nexport interface ListenerOptions {\n    /**\n     * Listener identifier. This is used to find and remove the listener\n     * without needing the callback reference.\n     *\n     * For more information, please look at the {@link Emitter.remove} method.\n     */\n    id: string | undefined;\n    /**\n     * If `true`, the listener is automatically removed after it's invoked.\n     * Defaults to `false`.\n     */\n    once: boolean;\n}\n\n/** Internal listener type. */\ntype Listener<T extends unknown[]> = ListenerOptions & {\n    callback: ListenerCallback<T>;\n};\n\n/**\n * Event emitter.\n *\n * This class allows to register listeners that will get notified by the emitter.\n *\n * Usage example\n *\n * ```js\n * // `onPreRender` is an `Emitter` instance.\n * scene.onPreRender.add(() => console.log('before rendering'));\n * // `onPostRender` is an `Emitter` instance.\n * scene.onPostRender.add(() => console.log('before rendering'));\n * ```\n *\n * You can create your own emitters:\n *\n * ```js\n * import {Emitter} from '@wonderlandengine/api';\n *\n * const emitter = new Emitter();\n * ```\n *\n * You can notify listeners in to your emitter using {@link Emitter.notify}:\n *\n * ```js\n * // Notifies all the listeners.\n * emitter.notify();\n * // Notifies all the listeners with some data.\n * emitter.notify({ myInt: 42, myStr: 'Hello World!' });\n * ```\n *\n * @category event\n */\nexport class Emitter<T extends unknown[] = void[]> {\n    /**\n     * List of listeners to trigger when `notify` is called.\n     *\n     * @hidden\n     */\n    private readonly _listeners: Listener<T>[] = [];\n\n    /** Pre-resolved data. @hidden */\n    private _event: T | undefined = undefined;\n\n    /**\n     * If `true`, the emitter will emit the value of the last\n     * {@link Emitter.notify notify} to listeners added afterwards.\n     *\n     * @hidden\n     */\n    private readonly _autoResolve: boolean;\n\n    /**\n     * Create a new instance.\n     *\n     * @param autoResolve If `true`, the emitter will store the data of last\n     *     {@link Emitter.notify} notify to automatically resolve future listeners.\n     */\n    constructor(autoResolve = false) {\n        this._autoResolve = autoResolve;\n    }\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Basic usage:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * Automatically remove the listener when an event is received:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * }, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     * @param opts The listener options. For more information, please have a look\n     *     at the {@link ListenerOptions} interface.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    add(listener: ListenerCallback<T>, opts: Partial<ListenerOptions> = {}): this {\n        const {once = false, id = undefined} = opts;\n\n        if (this._event !== undefined) {\n            listener(...this._event);\n            /* Listener doesn't need to be stored, short circuit the insertion. */\n            if (once) return this;\n        }\n        this._listeners.push({id, once, callback: listener});\n        return this;\n    }\n\n    /**\n     * Equivalent to {@link Emitter.add}.\n     *\n     * @param listeners The callback(s) to register.\n     * @returns Reference to self (for method chaining).\n     *\n     * @deprecated Please use {@link Emitter.add} instead.\n     */\n    push(...listeners: ListenerCallback<T>[]): this {\n        for (const cb of listeners) this.add(cb);\n        return this;\n    }\n\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Once notified, the listener will be automatically removed.\n     *\n     * The method is equivalent to calling {@link Emitter.add} with:\n     *\n     * ```js\n     * emitter.add(listener, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     * @param opts The listener options. For more information, please have a look\n     *     at the {@link ListenerOptions} interface.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener: ListenerCallback<T>) {\n        return this.add(listener, {once: true});\n    }\n\n    /**\n     * Remove a registered listener.\n     *\n     * Usage with a callback:\n     *\n     * ```js\n     * const listener = (data) => console.log(data);\n     * emitter.add(listener);\n     *\n     * // Remove using the callback reference:\n     * emitter.remove(listener);\n     * ```\n     *\n     * Usage with an id:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'my-callback'});\n     *\n     * // Remove using the id:\n     * emitter.remove('my-callback');\n     * ```\n     *\n     * @param listener The registered callback or a string representing the `id`.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    remove(listener: ListenerCallback<T> | string): this {\n        const index = this._find(listener);\n        if (index !== null) this._listeners.splice(index, 1);\n        return this;\n    }\n\n    /**\n     * Check whether the listener is registered.\n     *\n     * @note This method performs a linear search.\n     *\n     * @param listener The registered callback or a string representing the `id`.\n     * @returns `true` if the handle is found, `false` otherwise.\n     */\n    has(listener: ListenerCallback<T> | string): boolean {\n        return this._find(listener) !== null;\n    }\n\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notify(...data: T): void {\n        const listeners = this._listeners;\n\n        if (this._autoResolve) this._event = data;\n\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once) listeners.splice(i--, 1);\n            listener.callback(...data);\n        }\n    }\n\n    /**\n     * Return a promise that will resolve on the next event.\n     *\n     * @note The promise might never resolve if no event is sent.\n     *\n     * @returns A promise that resolves with the data passed to\n     *     {@link Emitter.notify}.\n     */\n    promise(): Promise<T> {\n        return new Promise((res, _) => {\n            this.once((...args) => {\n                if (args.length > 1) {\n                    res(args);\n                } else {\n                    res(args[0] as T);\n                }\n            });\n        });\n    }\n\n    /**\n     * Find the listener index.\n     *\n     * @param listener The registered callback or a string representing the `id`.\n     * @returns The index if found, `null` otherwise.\n     *\n     * @hidden\n     */\n    private _find(listener: ListenerCallback<T> | string): number | null {\n        const listeners = this._listeners;\n        if (isString(listener)) {\n            for (let i = 0; i < listeners.length; ++i) {\n                if (listeners[i].id === listener) return i;\n            }\n            return null;\n        }\n        for (let i = 0; i < listeners.length; ++i) {\n            if (listeners[i].callback === listener) return i;\n        }\n        return null;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
